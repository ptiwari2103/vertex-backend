<%- contentFor('title') %>Card Management - Vertex Admin

<%- contentFor('style') %>
<style>
.main-content {
    padding: 20px;
}

.welcome-section {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    margin-bottom: 20px;
}

.table-section {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.button-group {
    display: flex;
    flex-direction: row;
    white-space: nowrap;
}

.button-group .btn:not(:last-child) {
    margin-right: 1px;
}

.date-filter {
    max-width: 150px;
}

.status-badge {
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 12px;
    font-weight: 500;
    cursor: pointer;
}

.status-active {
    background-color: #d4edda;
    color: #155724;
}

.status-pending {
    background-color: #fff3cd;
    color: #856404;
}

.status-inactive {
    background-color: #f8d7da;
    color: #721c24;
}

.action-btn {
    padding: 5px 10px;
    font-size: 14px;
    margin: 0 2px;
}
</style>

<%- contentFor('body') %>
<% 
// Helper function to format currency
function formatCurrency(amount) {
    const currencyUnit = process.env.CURRENCY_UNIT || 'â‚¹';
    if (amount === null || amount === undefined) return `${currencyUnit}0.00`;
    
    // Format the number with commas for thousands separator
    const formattedAmount = parseFloat(amount)
      .toFixed(2)
      .replace(/\d(?=(\d{3})+\.)/g, '$&,');
    
    return `${currencyUnit}${formattedAmount}`;
}
%>
<div class="main-content">
    <div class="welcome-section">
        <div class="d-flex justify-content-between align-items-center">
            <h2 class="mb-0">Card List</h2>
            <a href="/cards/download-expiring" class="btn btn-success">
                <i class="fas fa-download me-1"></i> Download Expiring Cards
            </a>
        </div>
        <!-- Filters Section -->
        <form id="filterForm" class="row g-3">
            <div class="col-md-3">
                <label class="form-label">User ID</label>
                <input type="text" class="form-control" name="user_id" maxlength="8"
                    value="<%= query.user_id || '' %>" placeholder="Enter User ID">
            </div>
            <div class="col-md-3">
                <label class="form-label">Status</label>
                <select class="form-select" name="status">
                    <option value="">All</option>
                    <option value="Approved" <%=query.status==='Approved' ? 'selected' : '' %>>Approved
                    </option>
                    <option value="Rejected" <%=query.status==='Rejected' ? 'selected' : '' %>>Rejected
                    </option>
                    <option value="Blocked" <%=query.status==='Blocked' ? 'selected' : '' %>>Blocked
                    </option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Expiry Year</label>
                <select class="form-select" name="expiryYear">
                    <option value="">All</option>
                    <% 
                    const currentYear = new Date().getFullYear();
                    for(let i=currentYear; i<=currentYear+5; i++) { %>
                        <option value="<%= i %>" <%= query.expiryYear == i ? 'selected' : '' %>><%= i %></option>
                    <% } %>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Expiry Month</label>
                <select class="form-select" name="expiryMonth">
                    <option value="">All</option>
                    <% 
                    const monthNames = [
                        'January', 'February', 'March', 'April', 'May', 'June',
                        'July', 'August', 'September', 'October', 'November', 'December'
                    ];
                    for(let i=1; i<=12; i++) { %>
                        <option value="<%= i %>" <%= query.expiryMonth == i ? 'selected' : '' %>><%= monthNames[i-1] %></option>
                    <% } %>
                </select>
            </div>
            
            <div class="col-md-2 d-flex align-items-end">
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary">Filter</button>
                    <button type="button" class="btn btn-secondary" onclick="resetFilters()">Reset</button>
                </div>
            </div>
        </form>
    </div>

    <!-- Table Section -->
    <div class="table-section">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>S.No.</th>
                        <th>User</th>
                        <th>Account Number</th>
                        <th>Card Number</th>
                        <th>Old Card Limit</th>
                        <th>Card Limit</th>
                        <th>Current Balance</th>
                        <th>Remaining Amount</th>
                        <th>Expiry Month</th>
                        <th>Expiry Year</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% 
                    const tableCurrentMonth = new Date().getMonth() + 1; // JavaScript months are 0-indexed
                    const tableCurrentYear = new Date().getFullYear();
                    cards.forEach((card, index)=> { 
                        // Check if card is expiring in current month and year
                        const isExpiringSoon = card.expiry_month === tableCurrentMonth && card.expiry_year === tableCurrentYear;
                    %>
                        <tr class="<%= isExpiringSoon ? 'table-warning' : '' %>">
                            <td>
                                <%= (pagination.currentPage - 1) * 10 + index + 1 %>
                            </td>
                            <td>
                                <%= card.user.name %> (<%= card.user.user_id %>)
                            </td>

                            <td>
                                <%= card.user.account_number %>
                            </td>

                            <td>
                                <%= card.card_number %>
                            </td>
                            <td>
                                <%= formatCurrency(card.old_card_limit) %>
                            </td>
                            <td>
                                <%= formatCurrency(card.card_limit) %>
                            </td>
                            <td>
                                <%= formatCurrency(card.current_balance) %>
                            </td>
                            <td>
                                <%= formatCurrency(card.remaining_amount) %>
                            </td>
                            <td>
                                <% 
                                if (card.expiry_month) {
                                    const monthNames = [
                                        'January', 'February', 'March', 'April', 'May', 'June',
                                        'July', 'August', 'September', 'October', 'November', 'December'
                                    ];
                                    %><%= monthNames[card.expiry_month - 1] %><%
                                } else { 
                                    %>-<%
                                } 
                                %>
                            </td>
                            <td>
                                <%= card.expiry_year || '-' %>
                            </td>
                            <td>
                                <span
                                    class="status-badge <%= card.status.toLowerCase() === 'approved' ? 'status-active' : 
                                    card.status.toLowerCase() === 'pending' ? 'status-pending' : 'status-inactive' %>"
                                    onclick="updateCardStatus('<%= card.id %>', '<%= card.status %>')">
                                    <%= card.status %>
                                </span>
                            </td>

                            <td>
                                <div class="button-group">
                                    <button class="btn btn-primary btn-sm action-btn"
                                        onclick="openViewCardModal('<%= card.user.name %>','<%= card.user.user_id %>','<%= card.user.account_number %>','<%= card.card_number %>','<%= card.expiry_month %>','<%= card.expiry_year %>','<%= card.card_limit %>','<%= card.current_balance %>', '<%= card.remaining_amount %>','<%= card.assigned_date %>','<%= card.created_at %>','<%= card.status %>')">View</button>
                                    <button class="btn btn-warning btn-sm action-btn"
                                        onclick="openEditCardModal('<%= card.id %>','<%= card.card_number %>','<%= card.expiry_month %>','<%= card.expiry_year %>','<%= card.card_limit %>','<%= card.status %>')">Edit</button>
                                    <button class="btn btn-info btn-sm action-btn"
                                        onclick="openIncreaseLimitModal('<%= card.id %>','<%= card.card_number %>','<%= card.card_limit %>')">Increase Limit</button>
                                </div>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>

    
    <nav>
        <ul class="pagination">
            <li class="page-item <%= pagination.currentPage === 1 ? 'disabled' : '' %>">
                <a class="page-link"
                    href="?page=<%= pagination.currentPage - 1 %>&user_id=<%= query.user_id || '' %>&created_date=<%= query.created_date || '' %>"
                    tabindex="-1">Previous</a>
            </li>
            <% for(let i=1; i <=pagination.totalPages; i++) { %>
                <li class="page-item <%= pagination.currentPage === i ? 'active' : '' %>">
                    <a class="page-link"
                        href="?page=<%= i %>&user_id=<%= query.user_id || '' %>&created_date=<%= query.created_date || '' %>">
                        <%= i %>
                    </a>
                </li>
                <% } %>
                    <li
                        class="page-item <%= pagination.currentPage === pagination.totalPages ? 'disabled' : '' %>">
                        <a class="page-link"
                            href="?page=<%= pagination.currentPage + 1 %>&user_id=<%= query.user_id || '' %>&created_date=<%= query.created_date || '' %>">Next</a>
                    </li>
        </ul>
    </nav>
</div>



<div class="modal fade" id="editCardModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Card</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editCardForm" class="needs-validation" novalidate>
                    <input type="hidden" name="id" id="editCardId">
                    <input type="hidden" name="card_number" id="editCardNumber">
                    
                    <div class="mb-3">
                        <label class="form-label">Card Number</label>
                        <input type="text" class="form-control" id="displayCardNumber" disabled>
                    </div>
                    
                    
                    <div class="row mb-3">
                        <div class="col-6">
                            <label class="form-label">Expiry Year</label>
                            <select class="form-select" name="expiry_year" id="editExpiryYear" required onchange="updateMonthOptions()">
                                <% const editModalYear = new Date().getFullYear(); %>
                                <% // Allow selection of past years (up to 5 years back) %>
                                <% for(let i=editModalYear; i<=editModalYear+5; i++) { %>
                                    <option value="<%= i %>"><%= i %></option>
                                <% } %>
                            </select>
                        </div>
                        <div class="col-6">
                            <label class="form-label">Expiry Month</label>
                            <select class="form-select" name="expiry_month" id="editExpiryMonth" required>
                                <% // Month names will be populated by JavaScript %>
                            </select>
                        </div>                        
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <select class="form-select" name="status" id="editCardStatus" required>
                            <option value="Approved">Approved</option>
                            <option value="Rejected">Rejected</option>
                            <option value="Blocked">Blocked</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="submitEditCardForm()">Save Changes</button>
            </div>
        </div>
    </div>
</div>




<div class="modal fade" id="increaseLimitModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Increase Limit</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="increaseLimitForm" class="needs-validation" novalidate>
                    <input type="hidden" name="id" id="editCardId2">
                    <input type="hidden" name="card_number" id="editCardNumber2">
                    <div class="mb-3">
                        <label class="form-label">Card Number</label>
                        <input type="text" class="form-control" id="displayCardNumber2" disabled>
                    </div> 
                    <div class="mb-3">
                        <label class="form-label">Card Limit</label>
                        <input type="number" step="0.01" class="form-control" name="card_limit" id="editCardLimit2" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="submitEditCardLimitForm()">Save Changes</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="addCardModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Card</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addCardForm" class="needs-validation" novalidate>
                    <input type="hidden" name="card_id" id="addCardId">
                    <div class="mb-3">
                        <label class="form-label">Expiry Date</label>
                        <input type="month" class="form-control" name="expiry_date" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Card Limit</label>
                        <input type="number" step="0.01" class="form-control" name="card_limit" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="submitAddCardForm()">Save
                    changes</button>
            </div>
        </div>
    </div>
</div>

<!-- View Card Modal -->
<div class="modal fade" id="viewCardModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">View Card</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p><strong>Name:</strong> <span id="viewName"></span></p>
                <p><strong>User ID:</strong> <span id="viewUserId"></span></p>
                <p><strong>Account Number:</strong> <span id="viewAccountNumber"></span></p>
                <p><strong>Card Number:</strong> <span id="viewCardNumber"></span></p>
                <p><strong>Expiry Date:</strong> <span id="viewExpiryDate"></span></p>
                <p><strong>Card Limit:</strong> <span id="viewCardLimit"></span></p>
                <p><strong>Current Balance:</strong> <span id="viewCurrentBalance"></span></p>
                <p><strong>Remaining Amount:</strong> <span id="viewRemainingAmount"></span></p>
                <p><strong>Assigned Date:</strong> <span id="viewAssignedDate"></span></p>
                <p><strong>Created Date:</strong> <span id="viewCreatedDate"></span></p>
                <p><strong>Status:</strong> <span id="viewStatus"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Card Status Update Modal -->
<div class="modal fade" id="cardStatusUpdateModal" tabindex="-1"
    aria-labelledby="cardStatusUpdateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cardStatusUpdateModalLabel">Update Card Status</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="cardStatusSelect">Status</label>
                    <select class="form-select" id="cardStatusSelect">
                        <option value="Approved">Approved</option>
                        <option value="Rejected">Rejected</option>
                        <option value="Blocked">Blocked</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary"
                    onclick="confirmCardStatusUpdate()">Update</button>
            </div>
        </div>
    </div>
</div>




<script>
    let currentCardId = null;
    function updateCardStatus(id, currentStatus) {
        currentCardId = id;
        const statusSelect = document.getElementById('cardStatusSelect');
        statusSelect.value = currentStatus;
        const modal = new bootstrap.Modal(document.getElementById('cardStatusUpdateModal'));
        modal.show();
    }

    async function confirmCardStatusUpdate() {
        const newStatus = document.getElementById('cardStatusSelect').value;

        try {
            const response = await fetch(`/cards/${currentCardId}/status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: newStatus })
            });

            if (response.ok) {
                const modal = bootstrap.Modal.getInstance(document.getElementById('cardStatusUpdateModal'));
                modal.hide();
                location.reload();
            } else {
                const data = await response.json();
                alert(data.message || 'Failed to update status');
            }
        } catch (error) {
            console.error('Error updating status:', error);
            alert('Failed to update status');
        }
    }

    function resetFilters() {
        // Clear all filter inputs
        document.querySelector('input[name="user_id"]').value = '';
        document.querySelector('select[name="status"]').value = '';
        document.querySelector('select[name="expiryMonth"]').value = '';
        document.querySelector('select[name="expiryYear"]').value = '';
        
        // Submit the form to apply the cleared filters
        document.getElementById('filterForm').submit();
    }

    function openAddCardModal(cardId) {
        document.getElementById('addCardId').value = cardId;
        const addCardModal = new bootstrap.Modal(document.getElementById('addCardModal'));
        addCardModal.show();
    }

    function submitAddCardForm() {
        const form = document.getElementById('addCardForm');
        if (!form.checkValidity()) {
            form.classList.add('was-validated');
            return;
        }

        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        console.log("data", data);
        fetch('/cards/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to update card');
                }
                window.location.reload();
            })
            .catch(error => {
                alert('Error updating card: ' + error.message);
            });
    }


    function openViewCardModal(name, userId, accountNumber, cardNumber, expiryMonth, expiryYear, cardLimit, currentBalance, remainingAmount, assignedDate, createdDate, status) {
        document.getElementById('viewName').textContent = name;
        document.getElementById('viewUserId').textContent = userId;
        document.getElementById('viewAccountNumber').textContent = accountNumber;
        document.getElementById('viewCardNumber').textContent = cardNumber;
        document.getElementById('viewExpiryDate').textContent = `${expiryMonth}/${expiryYear}`;
        
        // Format currency values directly in JavaScript
        const currencyUnit = '<%= process.env.CURRENCY_UNIT || "â‚¹" %>';
        const formatAmount = (amount) => {
            if (amount === null || amount === undefined) return `${currencyUnit}0.00`;
            return `${currencyUnit}${parseFloat(amount).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}`;
        };
        
        document.getElementById('viewCardLimit').textContent = formatAmount(cardLimit);
        document.getElementById('viewCurrentBalance').textContent = formatAmount(currentBalance);
        document.getElementById('viewRemainingAmount').textContent = formatAmount(remainingAmount);
        document.getElementById('viewAssignedDate').textContent = assignedDate ? new Date(assignedDate).toLocaleDateString() : '-';
        document.getElementById('viewCreatedDate').textContent = new Date(createdDate).toLocaleDateString();
        document.getElementById('viewStatus').textContent = status;
        
        const modal = new bootstrap.Modal(document.getElementById('viewCardModal'));
        modal.show();
    }

    function resetFilters() {
        const form = document.getElementById('filterForm');
        form.reset();
        // Clear all form fields
        const inputs = form.querySelectorAll('input, select');
        inputs.forEach(input => {
            if (input.type === 'text' || input.type === 'number' || input.tagName === 'SELECT') {
                input.value = '';
            }
        });
        // Submit the form with cleared values
        window.location.href = '/cards/allcards';
    }
    
    // Function to update month options based on selected year
    function updateMonthOptions() {
        const monthSelect = document.getElementById('editExpiryMonth');
        const yearSelect = document.getElementById('editExpiryYear');
        const selectedYear = parseInt(yearSelect.value);
        const currentYear = new Date().getFullYear();
        const currentMonth = new Date().getMonth() + 1; // JavaScript months are 0-indexed
        
        // Clear existing options
        monthSelect.innerHTML = '';
        
        // Month names array
        const monthNames = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ];
        
        // Determine which months to show
        let startMonth = 1;
        if (selectedYear === currentYear) {
            // For current year, only show current and future months
            startMonth = currentMonth;
        }
        
        // Add month options
        for (let i = startMonth; i <= 12; i++) {
            const option = document.createElement('option');
            option.value = i;
            option.textContent = monthNames[i-1]; // Adjust for 0-indexed array
            monthSelect.appendChild(option);
        }
        
        // If we have a stored month value, try to select it
        if (monthSelect.dataset.storedValue) {
            const storedValue = parseInt(monthSelect.dataset.storedValue);
            // Only select if it's a valid option for the current year
            if (selectedYear > currentYear || storedValue >= startMonth) {
                monthSelect.value = storedValue;
            } else if (monthSelect.options.length > 0) {
                // Otherwise select the first available option
                monthSelect.selectedIndex = 0;
            }
        }
    }
    
    // Edit Card Modal Functions
    function openEditCardModal(id, cardNumber, expiryMonth, expiryYear, cardLimit, status) {
        // Set values in the form
        document.getElementById('editCardId').value = id;
        document.getElementById('editCardNumber').value = cardNumber;
        document.getElementById('displayCardNumber').value = cardNumber;
        document.getElementById('editExpiryYear').value = expiryYear;
        //document.getElementById('editCardLimit').value = cardLimit;
        document.getElementById('editCardStatus').value = status;
        
        // Store the month value to use after populating the dropdown
        const monthSelect = document.getElementById('editExpiryMonth');
        monthSelect.dataset.storedValue = expiryMonth;
        
        // Update month options based on selected year
        updateMonthOptions();
        
        // Show the modal
        const editModal = new bootstrap.Modal(document.getElementById('editCardModal'));
        editModal.show();
    }

    function openIncreaseLimitModal(id, cardNumber, cardLimit) {
        // Set values in the form
        document.getElementById('editCardId2').value = id;
        document.getElementById('editCardNumber2').value = cardNumber;
        document.getElementById('displayCardNumber2').value = cardNumber;
        document.getElementById('editCardLimit2').value = cardLimit;
        
               
        // Show the modal
        const increaseLimitModal = new bootstrap.Modal(document.getElementById('increaseLimitModal'));
        increaseLimitModal.show();
    }
    
    function submitEditCardForm() {
        const form = document.getElementById('editCardForm');
        
        if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
            form.classList.add('was-validated');
            return;
        }
        
        // Get form data
        const formData = new FormData(form);
        const data = {};
        formData.forEach((value, key) => {
            data[key] = value;
        });
        
        // Send AJAX request
        fetch('/cards/update-card', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                alert('Error: ' + data.error);
            } else {
                alert('Card updated successfully!');
                // Close the modal
                bootstrap.Modal.getInstance(document.getElementById('editCardModal')).hide();
                // Reload the page to show updated data
                window.location.reload();
            }
        })
        .catch(error => {
            alert('Error: ' + error.message);
        });
    }



    function submitEditCardLimitForm() {
        const form = document.getElementById('increaseLimitForm');
        
        if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
            form.classList.add('was-validated');
            return;
        }
        
        // Get form data
        const formData = new FormData(form);
        const data = {};
        formData.forEach((value, key) => {
            data[key] = value;
        });
        
        // Send AJAX request
        fetch('/cards/update-card-limit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                alert('Error: ' + data.error);
            } else {
                alert('Card limit updated successfully!');
                // Close the modal
                bootstrap.Modal.getInstance(document.getElementById('increaseLimitModal')).hide();
                // Reload the page to show updated data
                window.location.reload();
            }
        })
        .catch(error => {
            alert('Error: ' + error.message);
        });
    }
</script>