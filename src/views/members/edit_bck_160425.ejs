<%- contentFor('title') %>Edit Member - Vertex Admin

    <%- contentFor('style') %>
        <style>
            .main-content {
                padding: 20px;
            }

            .welcome-section {
                background: white;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                margin-bottom: 20px;
            }

            .section-card {
                background: white;
                border-radius: 10px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                margin-bottom: 20px;
                padding: 20px;
            }

            .section-title {
                border-bottom: 2px solid #f0f0f0;
                padding-bottom: 10px;
                margin-bottom: 20px;
                color: #333;
                font-size: 1.25rem;
                font-weight: bold;
            }

            .form-section {
                margin-bottom: 30px;
            }

            .document-preview {
                max-width: 80px;
                height: 80px;
                object-fit: cover;
                border: 1px solid #ddd;
                border-radius: 5px;
                margin: 10px 0;
            }

            .form-label {
                font-size: 0.875rem;
                font-weight: 500;
                color: #374151;
                margin-bottom: 0.25rem;
            }

            .form-control {
                border: 1px solid #d1d5db;
                border-radius: 0.375rem;
                padding: 0.5rem 0.75rem;
                font-size: 0.875rem;
                transition: border-color 0.15s ease-in-out;
            }

            .form-control:focus {
                border-color: #3b82f6;
                box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);
                outline: none;
            }

            .form-control.bg-light {
                background-color: #f3f4f6;
            }

            .form-check-input {
                width: 1rem;
                height: 1rem;
                margin-top: 0.25rem;
            }

            .form-check-label {
                font-size: 0.875rem;
                color: #111827;
                margin-left: 0.5rem;
            }

            .btn-primary {
                background-color: #3b82f6;
                border-color: #3b82f6;
                color: white;
                padding: 0.5rem 1rem;
                font-size: 0.875rem;
                border-radius: 0.375rem;
                transition: all 0.15s ease-in-out;
            }

            .btn-primary:hover {
                background-color: #2563eb;
                border-color: #2563eb;
            }

            .btn-primary:focus {
                box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);
            }

            .row.g-3 {
                margin-right: -0.75rem;
                margin-left: -0.75rem;
            }

            .row.g-3>[class*="col-"] {
                padding-right: 0.75rem;
                padding-left: 0.75rem;
                margin-bottom: 1rem;
            }

            .divyang-certificate {
                margin-top: 1rem;
                padding: 1rem;
                border: 1px solid #e5e7eb;
                border-radius: 0.375rem;
                background-color: #f9fafb;
            }

            .alert {
                padding: 0.75rem 1rem;
                margin-bottom: 1rem;
                border: 1px solid transparent;
                border-radius: 0.375rem;
            }

            .alert-success {
                background-color: #d1fae5;
                border-color: #34d399;
                color: #065f46;
            }

            .alert-danger {
                background-color: #fee2e2;
                border-color: #f87171;
                color: #991b1b;
            }
        </style>

        <%- contentFor('body') %>
            <div class="main-content">
                <div class="welcome-section">
                    <div class="d-flex justify-content-between align-items-center">
                        <h2 class="mb-0">Edit Member</h2>
                        <div>
                            <a href="/members/allmembers" class="btn btn-secondary me-2">
                                <i class="bx bx-arrow-back"></i> Back to List
                            </a>
                            <a href="/members/view/<%= member.id %>" class="btn btn-info">
                                <i class="bx bx-show"></i> View Details
                            </a>
                        </div>
                    </div>
                </div>

                <!-- KYC Information -->
                <div class="section-card">
                    <h4 class="section-title">KYC Information</h4>
                    <form id="kycForm" class="form-section" enctype="multipart/form-data">
                        <input type="hidden" name="user_id" value="<%= member.user_id %>">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">PAN Number</label>
                                    <input type="text" class="form-control" name="pan_number"
                                        value="<%= member.profile?.pan_number || '' %>">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">PAN Card Image</label>
                                    <input type="file" class="form-control" name="pan_number_image" accept="image/*">
                                    <% if (member.profile?.pan_number_image) { %>
                                        <img src="/<%= member.profile.pan_number_image %>" class="document-preview"
                                            alt="PAN Card">
                                        <% } %>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Aadhar Number</label>
                                    <input type="text" class="form-control" name="aadhar_number"
                                        value="<%= member.profile?.aadhar_number || '' %>">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Aadhar Front Image</label>
                                    <input type="file" class="form-control" name="aadhar_number_image_front"
                                        accept="image/*">
                                    <% if (member.profile?.aadhar_number_image_front) { %>
                                        <img src="/<%= member.profile.aadhar_number_image_front %>"
                                            class="document-preview" alt="Aadhar Front">
                                        <% } %>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Aadhar Back Image</label>
                                    <input type="file" class="form-control" name="aadhar_number_image_back"
                                        accept="image/*">
                                    <% if (member.profile?.aadhar_number_image_back) { %>
                                        <img src="/<%= member.profile.aadhar_number_image_back %>"
                                            class="document-preview" alt="Aadhar Back">
                                        <% } %>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">Update KYC</button>
                    </form>
                </div>

                <!-- Profile Information -->
                <div class="section-card">
                    <h4 class="section-title">Profile Information</h4>
                    <form id="profileForm" class="form-section" enctype="multipart/form-data">
                        <input type="hidden" name="user_id" value="<%= member.user_id %>">
                        <input type="hidden" name="update_by" value="admin">
                        <div class="row g-3">
                            <!-- Read-only fields -->
                            <div class="col-md-4">
                                <label class="form-label">User ID</label>
                                <input type="text" class="form-control bg-light" value="<%= member.user_id %>" readonly
                                    disabled>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Account Number</label>
                                <input type="text" class="form-control bg-light" value="<%= member.account_number %>"
                                    readonly disabled>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Name</label>
                                <input type="text" class="form-control" name="name" value="<%= member.name %>">
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Mobile Number</label>
                                <input type="text" class="form-control" name="mobile_number"
                                    value="<%= member.mobile_number %>">
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Email ID</label>
                                <input type="email" name="email_id" class="form-control"
                                    value="<%= member.email_id || '' %>">
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Gender</label>
                                <select name="gender" class="form-control" required>
                                    <option value="">Select Gender</option>
                                    <% ['Male', 'Female' , 'Transgender' ].forEach(gender=> { %>
                                        <option value="<%= gender %>" <%=member.gender===gender ? 'selected' : '' %>><%=
                                                gender %>
                                        </option>
                                        <% }); %>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Date of Birth</label>
                                <input type="date" class="form-control bg-light" name="date_of_birth"
                                    value="<%= member.date_of_birth %>">
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Guardian Name</label>
                                <input type="text" class="form-control bg-light" name="guardian_name"
                                    value="<%= member.guardian_name %>">
                            </div>

                            <!-- Required fields -->
                            <div class="col-md-4">
                                <label class="form-label">Guardian Relation*</label>
                                <select name="guardian_relation" class="form-control" required>
                                    <option value="">Select Relation</option>
                                    <% ['Father', 'Mother' , 'Brother' , 'Sister' , 'Wife' , 'Husband' , 'Son'
                                        , 'Daughter' ].forEach(relation=> { %>
                                        <option value="<%= relation %>" <%=member.guardian_relation===relation
                                            ? 'selected' : '' %>><%= relation %>
                                        </option>
                                        <% }); %>
                                </select>
                            </div>

                            <div class="col-md-4">
                                <label class="form-label">Nominee Name*</label>
                                <input type="text" name="nominee_name" class="form-control"
                                    value="<%= member.profile?.nominee_name || '' %>" required>
                            </div>

                            <div class="col-md-4">
                                <label class="form-label">Nominee Relation*</label>
                                <select name="nominee_relation" class="form-control" required>
                                    <option value="">Select Relation</option>
                                    <% ['Father', 'Mother' , 'Brother' , 'Sister' , 'Wife' , 'Husband' , 'Son'
                                        , 'Daughter' ].forEach(relation=> { %>
                                        <option value="<%= relation %>" <%=member.profile?.nominee_relation===relation
                                            ? 'selected' : '' %>><%= relation %>
                                        </option>
                                        <% }); %>
                                </select>
                            </div>


                            <div class="col-md-4">
                                <label class="form-label">Nominee Contact*</label>
                                <input type="text" name="nominee_contact" class="form-control"
                                    value="<%= member.profile?.nominee_contact || '' %>" pattern="[0-9]{10}" required>
                            </div>

                            <div class="col-md-4">
                                <label class="form-label">Nominee Email</label>
                                <input type="email" name="nominee_email" class="form-control"
                                    value="<%= member.profile?.nominee_email || '' %>">
                            </div>

                            <div class="col-md-4">
                                <label class="form-label">Profile Image*</label>
                                <input type="file" name="profile_image" class="form-control" accept="image/*">
                                <% if (member.profile?.profile_image) { %>
                                    <img src="/<%= member.profile.profile_image %>" class="mt-2 document-preview"
                                        alt="Profile Image">
                                    <% } %>
                            </div>

                            <!-- Checkbox fields -->
                            <div class="col-12">
                                <div class="form-check mb-2">
                                    <!-- Hidden input to send false when unchecked -->
                                    <input type="hidden" id="is_divyang_hidden" name="is_divyang"
                                        value="<%= member.profile?.is_divyang ? 'true' : 'false' %>">

                                    <!-- Checkbox -->
                                    <input type="checkbox" id="isDivyang" class="form-check-input"
                                        <%=member.profile?.is_divyang ? 'checked' : '' %>
                                    onchange="updateDivyangValue()">

                                    <label class="form-check-label">Are you Divyang? </label>
                                </div>

                                <div id="divyangFields"
                                    class="divyang-fields <%= member.profile?.is_divyang ? '' : 'd-none' %>">
                                    <div class="row">
                                        <!-- Divyang Type Dropdown -->
                                        <div class="col-4">
                                            <label class="form-label">Divyang Type*</label>
                                            <select name="divyang_type" class="form-control"
                                                <%=member.profile?.is_divyang ? 'required' : '' %>>
                                                <option value="">Select Divyang Type</option>
                                                <option value="Blindness" <%=member.profile?.divyang_type==='Blindness'
                                                    ? 'selected' : '' %>>Blindness</option>
                                                <option value="Low-vision"
                                                    <%=member.profile?.divyang_type==='Low-vision' ? 'selected' : '' %>
                                                    >Low-vision</option>
                                                <option value="Hearing Impairment"
                                                    <%=member.profile?.divyang_type==='Hearing Impairment' ? 'selected'
                                                    : '' %>>Hearing Impairment</option>
                                                <option value="Locomotor Disability"
                                                    <%=member.profile?.divyang_type==='Locomotor Disability'
                                                    ? 'selected' : '' %>>Locomotor Disability</option>
                                                <option value="Mental Illness"
                                                    <%=member.profile?.divyang_type==='Mental Illness' ? 'selected' : ''
                                                    %>>Mental Illness</option>
                                                <option value="Multiple Disabilities"
                                                    <%=member.profile?.divyang_type==='Multiple Disabilities'
                                                    ? 'selected' : '' %>>Multiple Disabilities</option>
                                            </select>
                                        </div>

                                        <div class="col-4">
                                            <label class="form-label">Divyang Percentage*</label>
                                            <input type="number" name="divyang_percentage" class="form-control"
                                                <%=member.profile?.is_divyang ? 'required' : '' %> value="<%= member.profile?.divyang_percentage %>" min="0" max="100">
                                        </div>

                                        <!-- Divyang Certificate -->
                                        <div class="col-4">
                                            <label class="form-label">Divyang Certificate*</label>
                                            <input type="file" name="divyang_certificate" class="form-control"
                                                accept="image/*,.pdf" <%= (member.profile?.is_divyang && !member.profile?.divyang_certificate) ? 'required' : '' %>>
                                            <% if (member.profile?.divyang_certificate) { %>
                                                <div class="mt-3 text-center p-2" style="border: 1px dashed #dee2e6; border-radius: 4px;">
                                                    <a href="/<%= member.profile.divyang_certificate %>" target="_blank" class="d-inline-block">
                                                        <img src="/<%= member.profile.divyang_certificate %>"
                                                            class="document-preview" alt="Divyang Certificate"
                                                            style="height: 150px; width: auto; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                                                    </a>
                                                    <div class="mt-2">
                                                        <small class="text-muted">Click image to view full size</small>
                                                    </div>
                                                </div>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-check">
                                    <input type="hidden" id="is_senior_citizen_hidden" name="is_senior_citizen"
                                        value="<%= member.profile?.is_senior_citizen ? 'true' : 'false' %>">
                                    <input type="checkbox" id="is_senior_citizen" class="form-check-input"
                                        <%=member.profile?.is_senior_citizen ? 'checked' : '' %>
                                    onchange="updateSeniorCitizenValue()">
                                    <label class="form-check-label">Are you a Senior Citizen?</label>
                                </div>

                            </div>
                        </div>

                        <div class="mt-4">
                            <button type="submit" class="btn btn-primary">Update Profile</button>
                        </div>
                    </form>
                </div>

                <!-- Address Information -->
                <div class="section-card">
                    <h4 class="section-title">Address Information</h4>
                    <div class="mb-4">
                        <button type="button" class="btn btn-success" id="addNewAddressBtn">
                            <i class="bx bx-plus"></i> Add New Address
                        </button>
                    </div>
                    <div id="addressList">
                        <% member.userAddress.forEach((address, index)=> { %>
                            <div class="address-item mb-4 border rounded p-3">
                                <form class="addressForm" data-id="<%= address.id %>">
                                    <input type="hidden" name="user_id" value="<%= member.user_id %>">
                                    <input type="hidden" name="id" value="<%= address.id %>">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h5 class="mb-0">Address #<%= index + 1 %>
                                        </h5>
                                        <div>
                                            <span
                                                class="badge <%= address.status === 'Active' ? 'bg-success' : 'bg-secondary' %> me-2">
                                                <%= address.status %>
                                            </span>
                                            <button type="button" class="btn btn-sm btn-danger"
                                                onclick="deleteAddress('<%= address.id %>')">
                                                <i class="bx bx-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <h6>Permanent Address</h6>
                                            <div class="mb-3">
                                                <label class="form-label">Address</label>
                                                <input type="text" class="form-control" name="permanent_address"
                                                    value="<%= address.permanent_address %>" rows="3">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">City</label>
                                                <input type="text" class="form-control" name="permanent_city"
                                                    value="<%= address.permanent_city %>">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">State</label>
                                                <select class="form-select" id="edit_permanent_state_id_<%= address.id %>" name="permanent_state_id" data-address-id="<%= address.id %>">
                                                    <option value="">Select State</option>
                                                    <% if (typeof states !== 'undefined' && states && states.length > 0) { %>
                                                        <% states.forEach(state => { %>
                                                            <option value="<%= state.id %>" <%= address.permanent_state_id === state.id ? 'selected' : '' %>>
                                                                <%= state.name %>
                                                            </option>
                                                        <% }); %>
                                                    <% } %>
                                                </select>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">District</label>
                                                <select class="form-select" id="edit_permanent_district_id_<%= address.id %>" name="permanent_district_id" data-address-id="<%= address.id %>">
                                                    <option value="">Select District</option>
                                                    <% if (address.permanentDistrict) { %>
                                                        <option value="<%= address.permanent_district_id %>" selected>
                                                            <%= address.permanentDistrict.name %>
                                                        </option>
                                                    <% } %>
                                                </select>
                                                <div class="error-text" id="edit_permanent_district_error_<%= address.id %>"></div>
                                            </div>
                                            
                                            <div class="mb-3">
                                                <label class="form-label">Pincode</label>
                                                <input type="text" class="form-control" name="permanent_pincode" value="<%= address.permanent_pincode %>">
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <h6>Correspondence Address</h6>
                                            <div class="mb-3">
                                                <label class="form-label">Address</label>
                                                <input type="text" class="form-control" name="correspondence_address"
                                                    value="<%= address.correspondence_address %>" rows="3">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">City</label>
                                                <input type="text" class="form-control" name="correspondence_city"
                                                    value="<%= address.correspondence_city %>">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">State</label>
                                                <select class="form-select" id="edit_correspondence_state_id_<%= address.id %>" name="correspondence_state_id" data-address-id="<%= address.id %>">
                                                    <option value="">Select State</option>
                                                    <% if (typeof states !== 'undefined' && states && states.length > 0) { %>
                                                        <% states.forEach(state => { %>
                                                            <option value="<%= state.id %>" <%= address.correspondence_state_id === state.id ? 'selected' : '' %>>
                                                                <%= state.name %>
                                                            </option>
                                                        <% }); %>
                                                    <% } %>
                                                </select>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">District</label>
                                                <select class="form-select" id="edit_correspondence_district_id_<%= address.id %>" name="correspondence_district_id" data-address-id="<%= address.id %>">
                                                    <option value="">Select District</option>
                                                    <% if (address.correspondenceDistrict) { %>
                                                        <option value="<%= address.correspondence_district_id %>" selected>
                                                            <%= address.correspondenceDistrict.name %>
                                                        </option>
                                                    <% } %>
                                                </select>
                                                <div class="error-text" id="edit_correspondence_district_error_<%= address.id %>"></div>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Pincode</label>
                                                <input type="text" class="form-control" name="correspondence_pincode"
                                                    value="<%= address.correspondence_pincode %>">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mt-3">
                                        <button type="submit" class="btn btn-primary">Update Address</button>
                                        <button type="button" class="btn btn-outline-primary ms-2"
                                            onclick="setAddressStatus('<%= address.id %>', '<%= address.status === 'Active' ? 'Inactive' : 'Active' %>')">
                                            <%= address.status==='Active' ? 'Set as Inactive' : 'Set as Active' %>
                                        </button>
                                    </div>
                                </form>
                            </div>
                            <% }); %>
                    </div>
                </div>

                <!-- Bank Information -->
                <div class="section-card">
                    <h4 class="section-title">Bank Information</h4>
                    <div class="mb-4">
                        <button type="button" class="btn btn-success" onclick="addNewBank()">
                            <i class="bx bx-plus"></i> Add New Bank Account
                        </button>
                    </div>
                    <div id="bankList">
                        <% member.userBank.forEach((bank, index)=> { %>
                            <div class="bank-item mb-4 border rounded p-3">
                                <form class="bankForm" data-id="<%= bank.id %>">
                                    <input type="hidden" name="user_id" value="<%= member.user_id %>">
                                    <input type="hidden" name="id" value="<%= bank.id %>">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h5 class="mb-0">Bank Account #<%= index + 1 %>
                                        </h5>
                                        <div>
                                            <span
                                                class="badge <%= bank.status === 'Active' ? 'bg-success' : 'bg-secondary' %> me-2">
                                                <%= bank.status %>
                                            </span>
                                            <button type="button" class="btn btn-sm btn-danger"
                                                onclick="deleteBank('<%= bank.id %>')">
                                                <i class="bx bx-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Account Holder Name</label>
                                                <input type="text" class="form-control" name="account_holder"
                                                    value="<%= bank.account_holder %>">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Bank Name</label>
                                                <input type="text" class="form-control" name="bank_name"
                                                    value="<%= bank.bank_name %>">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Account Number</label>
                                                <input type="text" class="form-control" name="account_number"
                                                    value="<%= bank.account_number %>">
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Branch Name</label>
                                                <input type="text" class="form-control" name="branch_name"
                                                    value="<%= bank.branch_name %>">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">IFSC Number</label>
                                                <input type="text" class="form-control" name="ifsc_number"
                                                    value="<%= bank.ifsc_number %>">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Account Type</label>
                                                <select name="account_type" class="form-control" required>
                                                    <option value="">Select Account Type</option>
                                                    <option value="Savings" <%= bank.account_type === 'Savings' ? 'selected' : '' %>>Savings</option>
                                                    <option value="Current" <%= bank.account_type === 'Current' ? 'selected' : '' %>>Current</option>
                                                    <option value="Salary" <%= bank.account_type === 'Salary' ? 'selected' : '' %>>Salary</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mt-3">
                                        <button type="submit" class="btn btn-primary">Update Bank Details</button>
                                        <button type="button" class="btn btn-outline-primary ms-2"
                                            onclick="setBankStatus('<%= bank.id %>', '<%= bank.status === 'Active' ? 'Inactive' : 'Active' %>')">
                                            <%= bank.status==='Active' ? 'Set as Inactive' : 'Set as Active' %>
                                        </button>
                                    </div>
                                </form>
                            </div>
                            <% }); %>
                    </div>
                </div>

                <!-- Address Modal -->
                <div class="modal fade" id="addressModal" tabindex="-1">
                    <div class="modal-dialog modal-md">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Add New Address</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <form id="newAddressForm" class="needs-validation mx-auto" style="max-width: 95%;" novalidate>
                                    <input type="hidden" name="user_id" value="<%= member.user_id %>">
                                    <div class="row g-3">
                                        <div class="col-12">
                                            <h6>Permanent Address</h6>
                                            <div class="mb-3">
                                                <label class="form-label">Address*</label>
                                                <input type="text" class="form-control" name="permanent_address" required>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">City*</label>
                                                <input type="text" class="form-control" name="permanent_city" value="" required>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">State*</label>
                                                <select class="form-select" id="permanent_state_id" name="permanent_state_id" required>
                                                    <option value="">Select State</option>
                                                    <% if (typeof states !=='undefined' && states && states.length> 0) {
                                                        %>
                                                        <% states.forEach(state=> { %>
                                                            <option value="<%= state.id %>">
                                                                <%= state.name %>
                                                            </option>
                                                            <% }); %>
                                                                <% } %>
                                                </select>
                                            </div>

                                            <div class="mb-3">
                                                <label class="form-label">District*</label>
                                                <select class="form-select" id="permanent_district_id" name="permanent_district_id" required>
                                                    <option value="">Select</option>
                                                </select>
                                                <div class="error-text" id="permanent_districtError"></div>
                                            </div>
                                            
                                            <div class="mb-3">
                                                <label class="form-label">Pincode*</label>
                                                <input type="text" class="form-control" name="permanent_pincode" required value="">
                                            </div>
                                        </div>
                                        
                                        <!-- Same as Permanent Address Checkbox -->
                                        <div class="col-12 mb-3">
                                            <div class="form-check">
                                                <input type="checkbox" class="form-check-input" id="same_as_permanent" name="same_as_permanent">
                                                <label class="form-check-label" for="same_as_permanent">Same as Permanent Address</label>
                                            </div>
                                        </div>
                                        
                                        <div class="col-12">
                                            <h6>Correspondence Address</h6>
                                            <div class="mb-3">
                                                <label class="form-label">Address*</label>
                                                <input type="text" class="form-control" name="correspondence_address" required>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">City*</label>
                                                <input type="text" class="form-control" name="correspondence_city" required value="">
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">State*</label>
                                                <select class="form-select" id="correspondence_state_id" name="correspondence_state_id" required>
                                                    <option value="">Select State</option>
                                                    <% if (typeof states !=='undefined' && states && states.length> 0) {
                                                        %>
                                                        <% states.forEach(state=> { %>
                                                            <option value="<%= state.id %>">
                                                                <%= state.name %>
                                                            </option>
                                                            <% }); %>
                                                                <% } %>
                                                </select>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">District*</label>
                                                <select class="form-select" id="correspondence_district_id" name="correspondence_district_id" required>
                                                    <option value="">Select</option>
                                                </select>
                                                <div class="error-text" id="correspondence_districtError"></div>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Pincode*</label>
                                                <input type="text" class="form-control" name="correspondence_pincode" required value="">
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary" id="saveAddressBtn">Save
                                    Address</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bank Modal -->
                <div class="modal fade" id="bankModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Add New Bank Account</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <form id="newBankForm" class="needs-validation" novalidate>
                                    <input type="hidden" name="user_id" value="<%= member.user_id %>">
                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Account Holder Name *</label>
                                                <input type="text" class="form-control" value="<%= member.name %>" name="account_holder" required readonly>
                                                <div class="invalid-feedback">Account Holder Name is required</div>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Bank Name *</label>
                                                <input type="text" class="form-control" name="bank_name" required>
                                                <div class="invalid-feedback">Bank Name is required</div>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Account Number *</label>
                                                <input type="text" class="form-control" name="account_number" required
                                                    pattern="[0-9]{9,18}">
                                                <div class="invalid-feedback">Please enter a valid account number (9-18
                                                    digits)</div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Branch Name *</label>
                                                <input type="text" class="form-control" name="branch_name" required>
                                                <div class="invalid-feedback">Branch Name is required</div>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">IFSC Number *</label>
                                                <input type="text" class="form-control" name="ifsc_number" required
                                                    pattern="^[A-Z]{4}0[A-Z0-9]{6}$">
                                                <div class="invalid-feedback">Please enter a valid IFSC code</div>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Account Type *</label>
                                                <select name="account_type" class="form-control" required>
                                                    <option value="">Select Account Type</option>
                                                    <option value="Savings">Savings</option>
                                                    <option value="Current">Current</option>
                                                    <option value="Salary">Salary</option>
                                                </select>
                                                <div class="invalid-feedback">Please select an account type</div>
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary" onclick="submitNewBank()">Save Bank
                                    Details</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <script>
                let addressModal;
                let bankModal;

                document.addEventListener('DOMContentLoaded', function () {
                        // Initialize Bootstrap modals
                        addressModal = new bootstrap.Modal(document.getElementById('addressModal'));
                        bankModal = new bootstrap.Modal(document.getElementById('bankModal'));

                        // Handle permanent state change in the address modal
                        const permanentStateSelect = document.getElementById('permanent_state_id');
                        const permanentDistrictSelect = document.getElementById('permanent_district_id');
                        const permanentDistrictError = document.getElementById('permanent_districtError');
                        
                        if (permanentStateSelect) {
                            permanentStateSelect.addEventListener('change', function() {
                                const selectedStateId = this.value;
                                
                                // Reset district dropdown
                                permanentDistrictSelect.innerHTML = '<option value="">Select</option>';
                                permanentDistrictError.textContent = '';
                
                                if (!selectedStateId) return;
                
                                // Fetch districts for the selected state via AJAX
                                fetch(`/locations/districts?stateId=${selectedStateId}`)
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(districts => {
                                        if (districts && districts.length > 0) {
                                            districts.forEach(district => {
                                                const option = document.createElement('option');
                                                option.value = district.id;
                                                option.textContent = district.name;
                                                permanentDistrictSelect.appendChild(option);
                                            });
                                        } else {
                                            permanentDistrictError.textContent = 'No districts found for this state';
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error fetching districts:', error);
                                        permanentDistrictError.textContent = 'Error loading districts. Please try again.';
                                    });
                            });
                        }

                        // Handle correspondence state change in the address modal
                        const correspondenceStateSelect = document.getElementById('correspondence_state_id');
                        const correspondenceDistrictSelect = document.getElementById('correspondence_district_id');
                        const correspondenceDistrictError = document.getElementById('correspondence_districtError');
                        
                        if (correspondenceStateSelect) {
                            correspondenceStateSelect.addEventListener('change', function() {
                                const selectedStateId = this.value;
                                
                                // Reset district dropdown
                                correspondenceDistrictSelect.innerHTML = '<option value="">Select</option>';
                                correspondenceDistrictError.textContent = '';
                
                                if (!selectedStateId) return;
                
                                // Fetch districts for the selected state via AJAX
                                fetch(`/locations/districts?stateId=${selectedStateId}`)
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        return response.json();
                                    })
                                    .then(districts => {
                                        if (districts && districts.length > 0) {
                                            districts.forEach(district => {
                                                const option = document.createElement('option');
                                                option.value = district.id;
                                                option.textContent = district.name;
                                                correspondenceDistrictSelect.appendChild(option);
                                            });
                                        } else {
                                            correspondenceDistrictError.textContent = 'No districts found for this state';
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error fetching districts:', error);
                                        correspondenceDistrictError.textContent = 'Error loading districts. Please try again.';
                                    });
                            });
                        }

                        // Add "Same as Permanent" checkbox functionality
                        const sameAsCheckbox = document.getElementById('same_as_permanent');
                        if (sameAsCheckbox) {
                            sameAsCheckbox.addEventListener('change', function() {
                                if (this.checked) {
                                    // Get the modal form container to scope our selectors
                                    const modalForm = document.getElementById('newAddressForm');
                                    
                                    // Copy permanent address values to correspondence
                                    const permanentAddress = modalForm.querySelector('input[name="permanent_address"]').value;
                                    const permanentCity = modalForm.querySelector('input[name="permanent_city"]').value;
                                    const permanentStateId = modalForm.querySelector('#permanent_state_id').value;
                                    const permanentDistrictId = modalForm.querySelector('#permanent_district_id').value;
                                    const permanentPincode = modalForm.querySelector('input[name="permanent_pincode"]').value;

                                    console.log('Permanent values:', {
                                        address: permanentAddress,
                                        city: permanentCity,
                                        stateId: permanentStateId,
                                        districtId: permanentDistrictId,
                                        pincode: permanentPincode
                                    });

                                    // Set correspondence address values
                                    modalForm.querySelector('input[name="correspondence_address"]').value = permanentAddress;
                                    modalForm.querySelector('input[name="correspondence_city"]').value = permanentCity;
                                    
                                    // Set state dropdown and trigger change event to load districts
                                    const correspondenceStateSelect = modalForm.querySelector('#correspondence_state_id');
                                    correspondenceStateSelect.value = permanentStateId;
                                    
                                    // Manually trigger the change event to load districts
                                    const changeEvent = new Event('change');
                                    correspondenceStateSelect.dispatchEvent(changeEvent);
                                    
                                    // We'll set the district after districts are loaded
                                    // Store the district ID to be selected after districts are loaded
                                    correspondenceStateSelect.dataset.districtToSelect = permanentDistrictId;
                                    
                                    modalForm.querySelector('input[name="correspondence_pincode"]').value = permanentPincode;
                                }
                            });
                        }

                        // Handle state-district dropdowns in the edit form
                        document.addEventListener('DOMContentLoaded', function() {
                            // Function to set up state-district relationship for an address
                            function setupStateDistrictDropdowns(stateSelectId, districtSelectId, errorElementId) {
                                const stateSelect = document.getElementById(stateSelectId);
                                const districtSelect = document.getElementById(districtSelectId);
                                const errorElement = document.getElementById(errorElementId);
                                
                                if (!stateSelect || !districtSelect) {
                                    console.warn(`Could not find elements: stateSelect=${stateSelectId}, districtSelect=${districtSelectId}`);
                                    return;
                                }
                                
                                console.log(`Setting up state-district relationship for ${stateSelectId} -> ${districtSelectId}`);
                                
                                stateSelect.addEventListener('change', function() {
                                    const selectedStateId = this.value;
                                    console.log(`State changed to ${selectedStateId} in ${stateSelectId}`);
                                    
                                    // Clear existing options except the first one
                                    while (districtSelect.options.length > 1) {
                                        districtSelect.remove(1);
                                    }
                                    
                                    if (!selectedStateId) return;
                                    
                                    // Fetch districts for the selected state
                                    fetch(`/locations/districts?stateId=${selectedStateId}`)
                                        .then(response => {
                                            if (!response.ok) {
                                                throw new Error('Network response was not ok');
                                            }
                                            return response.json();
                                        })
                                        .then(districts => {
                                            console.log(`Received ${districts.length} districts for state ${selectedStateId}`);
                                            if (districts && districts.length > 0) {
                                                districts.forEach(district => {
                                                    const option = document.createElement('option');
                                                    option.value = district.id;
                                                    option.textContent = district.name;
                                                    districtSelect.appendChild(option);
                                                });
                                                
                                                // If there's a district to select (from "Same as Permanent" checkbox)
                                                if (stateSelect.dataset.districtToSelect) {
                                                    districtSelect.value = stateSelect.dataset.districtToSelect;
                                                    delete stateSelect.dataset.districtToSelect;
                                                }
                                            } else {
                                                if (errorElement) {
                                                    errorElement.textContent = 'No districts found for this state';
                                                }
                                            }
                                        })
                                        .catch(error => {
                                            console.error('Error fetching districts:', error);
                                            if (errorElement) {
                                                errorElement.textContent = 'Error loading districts. Please try again.';
                                            }
                                        });
                            });
                        }
                        
                        // Set up state-district dropdowns for each address in the edit form
                        const addresses = document.querySelectorAll('[data-address-id]');
                        const addressIds = new Set();
                        
                        addresses.forEach(element => {
                            const addressId = element.dataset.addressId;
                            if (addressId && !addressIds.has(addressId)) {
                                addressIds.add(addressId);
                                
                                // Setup permanent address dropdowns
                                setupStateDistrictDropdowns(
                                    `edit_permanent_state_id_${addressId}`,
                                    `edit_permanent_district_id_${addressId}`,
                                    `edit_permanent_district_error_${addressId}`
                                );
                                
                                // Setup correspondence address dropdowns
                                setupStateDistrictDropdowns(
                                    `edit_correspondence_state_id_${addressId}`,
                                    `edit_correspondence_district_id_${addressId}`,
                                    `edit_correspondence_district_error_${addressId}`
                                );
                            }
                        });
                        
                        // Also set up the dropdowns in the new address modal
                        setupStateDistrictDropdowns(
                            'permanent_state_id',
                            'permanent_district_id',
                            'permanent_districtError'
                        );
                        
                        setupStateDistrictDropdowns(
                            'correspondence_state_id',
                            'correspondence_district_id',
                            'correspondence_districtError'
                        );
                    });
                    
                    function updateDivyangValue() {
                        const checkbox = document.getElementById("isDivyang");
                        const hiddenInput = document.getElementById("is_divyang_hidden");
                        hiddenInput.value = checkbox.checked ? "true" : "false";
                        const divyangDiv = document.getElementById("divyangFields");
                        if (checkbox.checked) {
                            divyangDiv.classList.remove("d-none");
                        } else {
                            divyangDiv.classList.add("d-none");
                        }
                    }

                    function updateSeniorCitizenValue() {
                        const checkbox = document.getElementById("is_senior_citizen");
                        const hiddenInput = document.getElementById("is_senior_citizen_hidden");
                        hiddenInput.value = checkbox.checked ? "true" : "false";
                    }

                    function updateAgentValue() {
                        const checkbox = document.getElementById("is_agent");
                        const hiddenInput = document.getElementById("is_agent_hidden");
                        hiddenInput.value = checkbox.checked ? "true" : "false";
                    }

                    function updateFanchiseValue() {
                        const checkbox = document.getElementById("is_fanchise");
                        const hiddenInput = document.getElementById("is_fanchise_hidden");
                        hiddenInput.value = checkbox.checked ? "true" : "false";
                    }
                    // KYC Form Submission
                    document.getElementById('kycForm').addEventListener('submit', async (e) => {
                        e.preventDefault();
                        const formData = new FormData(e.target);
                        try {
                            const response = await fetch('/members/adminkyc', {
                                method: 'POST',
                                body: formData
                            });

                            const data = await response.json();
                            if (data.success) {
                                alert('KYC details updated successfully');
                                location.reload();
                            } else {
                                alert(data.message || 'Failed to update KYC details');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Failed to update KYC details');
                        }
                    });

                    // Profile Form Submission
                    document.getElementById('profileForm').addEventListener('submit', async (e) => {
                        e.preventDefault();
                        const formData = new FormData(e.target);
                        try {
                            // const response = await fetch('/members/profile', {
                            //     method: 'POST',
                            //     headers: {
                            //         'Content-Type': 'application/json',
                            //     },
                            //     body: JSON.stringify(Object.fromEntries(formData)),
                            // });

                            const response = await fetch('/members/adminprofile', {
                                method: 'POST',
                                body: formData
                            });

                            const data = await response.json();
                            if (data.success) {
                                alert('Profile details updated successfully');
                                location.reload();
                            } else {
                                alert(data.message || 'Failed to update profile details');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Failed to update profile details');
                        }
                    });

                    // Address form handling
                    document.querySelectorAll('.addressForm').forEach(form => {
                        form.addEventListener('submit', async (e) => {
                            e.preventDefault();
                            const formData = new FormData(e.target);
                            const addressId = e.target.dataset.id;

                            try {
                                const response = await fetch('/members/adminaddupdateaddress', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify(Object.fromEntries(formData)),
                                });

                                const data = await response.json();
                                if (data.success) {
                                    alert('Address updated successfully');
                                    location.reload();
                                } else {
                                    alert(data.message || 'Failed to update address');
                                }
                            } catch (error) {
                                console.error('Error:', error);
                                alert('Failed to update address');
                            }
                        });
                    });

                    // Bank form handling
                    document.querySelectorAll('.bankForm').forEach(form => {
                        form.addEventListener('submit', async (e) => {
                            e.preventDefault();
                            const formData = new FormData(e.target);
                            const bankId = e.target.dataset.id;

                            try {
                                const response = await fetch('/members/adminaddupdatebank', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify(Object.fromEntries(formData)),
                                });

                                const data = await response.json();
                                if (data.success) {
                                    alert('Bank details updated successfully');
                                    location.reload();
                                } else {
                                    alert(data.message || 'Failed to update bank details');
                                }
                            } catch (error) {
                                console.error('Error:', error);
                                alert('Failed to update bank details');
                            }
                        });
                    });

                    // Address status update
                    async function setAddressStatus(addressId, status) {
                        try {
                            const response = await fetch(`/members/address/${addressId}/status`, {
                                method: 'PUT',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ status }),
                            });

                            const data = await response.json();
                            if (data.success) {
                                location.reload();
                            } else {
                                alert(data.message || 'Failed to update status');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Failed to update status');
                        }
                    }

                    // Bank status update
                    async function setBankStatus(bankId, status) {
                        try {
                            const response = await fetch(`/members/bank/${bankId}/status`, {
                                method: 'PUT',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ status }),
                            });

                            const data = await response.json();
                            if (data.success) {
                                location.reload();
                            } else {
                                alert(data.message || 'Failed to update status');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Failed to update status');
                        }
                    }

                    
                    // Add new bank
                    async function addNewBank() {
                        const formData = {
                            user_id: '<%= member.user_id %>',
                            bank_name: '',
                            branch_name: '',
                            account_number: '',
                            ifsc_code: '',
                            account_type: 'Saving',
                            status: 'Active',
                        };

                        try {
                            const response = await fetch('/members/adminaddupdatebank', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify(formData),
                            });

                            const data = await response.json();
                            if (data.success) {
                                location.reload();
                            } else {
                                alert(data.message || 'Failed to add bank account');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Failed to add bank account');
                        }
                    }

                    // Delete address
                    async function deleteAddress(addressId) {
                        if (!confirm('Are you sure you want to delete this address?')) return;

                        try {
                            const response = await fetch(`/members/address/${addressId}`, {
                                method: 'DELETE',
                            });

                            const data = await response.json();
                            if (data.success) {
                                location.reload();
                            } else {
                                alert(data.message || 'Failed to delete address');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Failed to delete address');
                        }
                    }

                    // Delete bank
                    async function deleteBank(bankId) {
                        if (!confirm('Are you sure you want to delete this bank account?')) return;

                        try {
                            const response = await fetch(`/members/bank/${bankId}`, {
                                method: 'DELETE',
                            });

                            const data = await response.json();
                            if (data.success) {
                                location.reload();
                            } else {
                                alert(data.message || 'Failed to delete bank account');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Failed to delete bank account');
                        }
                    }

                    // Global functions for address and bank management
                    function addNewAddress() {
                        document.getElementById('newAddressForm').reset();
                        addressModal.show();
                    }

                    function addNewBank() {
                        document.getElementById('newBankForm').reset();
                        bankModal.show();
                    }

                    async function submitNewAddress() {
                        const form = document.getElementById('newAddressForm');
                        if (!form.checkValidity()) {
                            form.classList.add('was-validated');
                            return;
                        }

                        const formData = new FormData(form);
                        const data = Object.fromEntries(formData.entries());
                        
                        // console.log('Submitting address data:', data);
                        
                        try {
                            const response = await fetch('/members/adminaddupdateaddress', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify(data),
                            });

                            // console.log('Response status:', response.status);
                            
                            if (!response.ok) {
                                const errorText = await response.text();
                                console.error('Error response:', errorText);
                                throw new Error(`Failed to add address: ${response.status} ${errorText}`);
                            }

                            // Refresh the page to show new address
                            window.location.reload();
                        } catch (error) {
                            alert('Error adding address: ' + error.message);
                        }
                    }

                    async function submitNewBank() {
                        const form = document.getElementById('newBankForm');
                        if (!form.checkValidity()) {
                            form.classList.add('was-validated');
                            return;
                        }

                        const formData = new FormData(form);
                        const data = Object.fromEntries(formData.entries());

                        try {
                            const response = await fetch('/members/adminaddupdatebank', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify(data),
                            });

                            if (!response.ok) {
                                throw new Error('Failed to add bank account');
                            }

                            // Refresh the page to show new bank account
                            window.location.reload();
                        } catch (error) {
                            alert('Error adding bank account: ' + error.message);
                        }
                    }

                    document.getElementById('addNewAddressBtn').addEventListener('click', addNewAddress);
                    document.getElementById('saveAddressBtn').addEventListener('click', submitNewAddress);
                });





// Common function to handle state-district relationship for existing addresses
function setupExistingAddressStateDistrict() {
    // Get all state dropdowns in the existing address forms
    const stateSelects = document.querySelectorAll('[id^="edit_permanent_state_id_"], [id^="edit_correspondence_state_id_"]');
    
    stateSelects.forEach(stateSelect => {
        // Get the address ID from the data attribute
        const addressId = stateSelect.dataset.addressId;
        if (!addressId) return;
        
        // Determine if this is a permanent or correspondence state dropdown
        const isPermanent = stateSelect.id.includes('permanent');
        
        // Get the corresponding district dropdown
        const districtSelectId = isPermanent 
            ? `edit_permanent_district_id_${addressId}` 
            : `edit_correspondence_district_id_${addressId}`;
        const districtSelect = document.getElementById(districtSelectId);
        
        if (!districtSelect) return;
        
        // Get the error element
        const errorElementId = isPermanent 
            ? `edit_permanent_district_error_${addressId}` 
            : `edit_correspondence_district_error_${addressId}`;
        const errorElement = document.getElementById(errorElementId);
        
        // Add change event listener to the state dropdown
        stateSelect.addEventListener('change', function() {
            const selectedStateId = this.value;
            //console.log(`State changed to ${selectedStateId} in ${this.id}`);
            
            // Clear existing district options except the first one
            while (districtSelect.options.length > 1) {
                districtSelect.remove(1);
            }
            
            if (!selectedStateId) return;
            
            // Fetch districts for the selected state
            fetch(`/locations/districts?stateId=${selectedStateId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(districts => {
                    //console.log(`Received ${districts.length} districts for state ${selectedStateId}`);
                    if (districts && districts.length > 0) {
                        districts.forEach(district => {
                            const option = document.createElement('option');
                            option.value = district.id;
                            option.textContent = district.name;
                            districtSelect.appendChild(option);
                        });
                    } else {
                        if (errorElement) {
                            errorElement.textContent = 'No districts found for this state';
                        }
                    }
                })
                .catch(error => {
                    //console.error('Error fetching districts:', error);
                    if (errorElement) {
                        errorElement.textContent = 'Error loading districts. Please try again.';
                    }
                });
        });
        
        // Trigger change event if state already has a value
        if (stateSelect.value) {
            // Create a custom event
            const changeEvent = new Event('change');
            stateSelect.dispatchEvent(changeEvent);
        }
    });
}

// Initialize the state-district dropdowns for existing addresses
document.addEventListener('DOMContentLoaded', function() {
    setupExistingAddressStateDistrict();
});
                </script>

                <%- contentFor('script') %>