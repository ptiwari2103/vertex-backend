<%- contentFor('style') %>
<style>
    /* Overlay Loader Styles */
    .overlay-loader {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        z-index: 9999;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }
    
    .spinner {
        width: 60px;
        height: 60px;
        border: 6px solid #f3f3f3;
        border-top: 6px solid #3498db;
        border-radius: 50%;
        animation: spin 2s linear infinite;
    }
    
    .loader-text {
        color: white;
        margin-top: 20px;
        font-size: 18px;
        font-weight: 500;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    .main-content {
       padding: 20px;
    }
    .welcome-section {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
        margin-bottom: 0;
    }
    .section-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
        padding: 20px;
    }
    .section-title {
        border-bottom: 2px solid #f0f0f0;
        padding-bottom: 10px;
        margin-bottom: 20px;
        color: #333;
    }
    .info-row {
        margin-bottom: 15px;
    }
    .info-label {
        font-weight: 700;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        color: #343a40;
        font-size: 0.95rem;
    }
    .info-value {
        font-weight: 500;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        color: #212529;
        text-align: left;
        padding-left: 0;
    }
    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.875rem;
        font-weight: 500;
    }
    .status-pending {
        background-color: #ffc107;
        color: #212529;
    }
    .status-approved {
        background-color: #28a745;
        color: #fff;
    }
    .status-rejected {
        background-color: #dc3545;
        color: #fff;
    }
    .status-closed {
        background-color: #ffc107;
        color: #212529;
    }
    
    /* Style for disabled buttons */
    button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
    #viewDepositModal .modal-body {
        padding: 1.5rem;
    }
    #viewDepositModal .row {
        margin-bottom: 0.75rem;
    }
    #viewDepositModal .modal-content {
        border-radius: 0.5rem;
    }
    .button-group {
        display: flex;
        flex-direction: row;
        white-space: nowrap;
    }
    .button-group .btn:not(:last-child) {
        margin-right: 1px;
    }
</style>

<%- contentFor('body') %>
<!-- Overlay Loader -->
<div class="overlay-loader" id="overlayLoader">
    <div class="spinner"></div>
    <div class="loader-text">Calculating deposits... Please wait</div>
</div>

<div class="main-content">
    <div class="welcome-section">
        <div class="d-flex justify-content-between align-items-center">
            <h2 class="mb-0">Recurring Deposit - <%= member.profile ? member.profile.name : member.user_id %></h2>
            <div>
                <a href="/members/view/<%= member.id %>" class="btn btn-secondary">
                    <i class="bx bx-arrow-back"></i> Back to Member
                </a>
                <button type="button" class="btn btn-primary" id="addNewDepositBtn" data-bs-toggle="modal" data-bs-target="#addDepositModal">
                    <i class="bx bx-plus"></i> Add New Deposit
                </button>
                <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#rdSettingsModal">
                    <i class="bx bx-cog"></i> RD Settings
                </button>
                <button type="button" class="btn btn-success" id="calculateButton" onclick="calculateDeposits()">
                    <i class="bx bx-calculator"></i> Calculate
                </button>
                <button type="button" class="btn btn-warning" id="settlementButton" onclick="settlementDeposits()">
                    <i class="bx bx-money"></i> Settlement
                </button>
            </div>
        </div>
    </div>

    <!-- Member Basic Info -->
    <div class="section-card">
        <h4 class="section-title">Member Information</h4>
        <div class="row">
            <div class="col-md-3">
                <div class="info-row">
                    <div class="info-label">Account Number</div>
                    <div class="info-value"><%= member.account_number %></div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="info-row">
                    <div class="info-label">User ID</div>
                    <div class="info-value"><%= member.user_id %></div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="info-row">
                    <div class="info-label">Name</div>
                    <div class="info-value"><%= member.name ? member.name : 'N/A' %></div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="info-row">
                    <div class="info-label">Mobile</div>
                    <div class="info-value"><%= member.mobile_number ? member.mobile_number : 'N/A' %></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Totals Row -->
    <div class="section-card">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h4 class="section-title mb-0">Totals</h4>
            <input type="hidden" id="selected_setting_id" value="">

            <% if (allSettings && allSettings.length > 0) { %>
            <div class="form-group mb-0" style="width: 300px;">
                <select class="form-select" id="rdSettingDropdown" onchange="loadSelectedRDSetting(this.value)">
                    <% allSettings.forEach(function(setting) { %>
                    <option value="<%= setting.id %>" <%= (activeSetting && activeSetting.id === setting.id) ? 'selected' : '' %>>
                        RD<%= setting.id %> - <%= formatCurrency(setting.amount) %>/<%= setting.payment_interval %> (<%= setting.annual_rate %>%)
                    </option>
                    <% }); %>
                </select>
            </div>
            <% } %>
        </div>
        <div class="row">
            <div class="col-md-3">
                <div class="info-row">
                    <div class="info-label">Total Principal</div>
                    <div class="info-value" id="totalPrincipalValue"><%= formatCurrency(activeSetting?.total_principal || 0) %></div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="info-row">
                    <div class="info-label">Total Interest</div>
                    <div class="info-value" id="totalInterestValue"><%= formatCurrency(activeSetting?.total_interest || 0) %></div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="info-row">
                    <div class="info-label">Total Penalty</div>
                    <div class="info-value" id="totalPenaltyValue"><%= formatCurrency(activeSetting?.total_penality || 0) %></div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="info-row">
                    <div class="info-label">Total Net</div>
                    <div class="info-value" id="totalNetValue"><%= formatCurrency(activeSetting?.total_net_amount || 0) %></div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="info-row">
                    <div class="info-label">Status</div>
                    <div class="info-value" id="settingStatusValue">
                        <% if (activeSetting) { %>
                            <% if (activeSetting.is_active === true || activeSetting.is_active === 1 || String(activeSetting.is_active) === '1') { %>
                                <span class="badge bg-success">Active</span>
                            <% } else if (activeSetting.is_active === 2 || String(activeSetting.is_active) === '2') { %>
                                <span class="badge bg-warning">Closed</span>
                            <% } else { %>
                                <span class="badge bg-danger">Inactive</span>
                            <% } %>
                        <% } else { %>
                            N/A
                        <% } %>
                    </div>
                </div>
            </div>
            
        </div>
    </div>

    <!-- Deposit History -->
    <div class="section-card">
        <h4 class="section-title">Deposit History</h4>
        <% if (deposits && deposits.length > 0) { %>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>S.No.</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Payment Method</th>
                            <th>Transaction ID</th>                            
                            <th>Per Day Rate</th>
                            <th>Payment Interval</th>
                            <th>Interest Amount</th>
                            <th>Penality Paid Amount</th>
                            <th>Total Amount</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% deposits.forEach((deposit, index) => { %>
                            <tr>
                                <td><%= index + 1 %></td>
                                <td><%= new Date(deposit.deposit_date).toLocaleDateString() %></td>
                                <td><%= formatCurrency(deposit.amount) %></td>
                                <td><%= deposit.payment_method || 'N/A' %></td>
                                <td><%= deposit.transaction_id || 'N/A' %></td>
                                <td><%= deposit.per_day_rate || 'N/A' %></td>
                                <td><%= deposit.payment_interval || 'N/A' %></td>
                                <td><%= formatCurrency(deposit.interest_amount) || 'N/A' %></td>
                                <td><%= formatCurrency(deposit.penality_paid_amount) || 'N/A' %></td>
                                <td><%= formatCurrency(deposit.total_amount) || 'N/A' %></td>
                                <td>
                                    <span class="status-badge status-<%= deposit.status.toLowerCase() %>"><%= deposit.status %></span>
                                </td>
                                <td>
                                    <div class="button-group">
                                        <button class="btn btn-sm btn-warning" 
                                            onclick="openEditDepositModal('<%= deposit.id %>', '<%= deposit.amount %>', '<%= deposit.payment_method %>', '<%= deposit.transaction_id %>', '<%= deposit.comments %>', '<%= deposit.status %>')" 
                                            <%= deposit.status === 'Closed' ? 'disabled="disabled"' : '' %>>
                                            <i class="bx bx-edit"></i> Edit
                                        </button>
                                        <button class="btn btn-sm btn-info" 
                                            onclick="viewDepositDetails('<%= deposit.id %>')">
                                            <i class="bx bx-show"></i> View
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        <% } else { %>
            <div class="alert alert-info">
                No deposit records found for this member.
            </div>
        <% } %>
    </div>
</div>

<!-- Add Deposit Modal -->
<div class="modal fade" id="addDepositModal" tabindex="-1" aria-labelledby="addDepositModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addDepositModalLabel">Add New Deposit</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addDepositForm">
                    <!-- First row: Annual Rate and Required Amount -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="deposit_per_day_rate" class="form-label">Per Day Rate (%)</label>
                            <input type="number" class="form-control" id="deposit_per_day_rate" name="per_day_rate" required min="0.01" step="0.01" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="required_amount" class="form-label">Required Amount (₹)</label>
                            <input type="number" class="form-control" id="required_amount" name="required_amount" required min="1" step="0.01" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="deposit_payment_interval" class="form-label">Payment Interval</label>
                            <input type="text" class="form-control" id="deposit_payment_interval" name="payment_interval" required readonly disabled>
                        </div>

                    </div>
                    
                    <!-- Second row: Payment Interval and Paid Amount -->
                    <div class="row mb-3">                        
                        <div class="col-md-4">
                            <label for="penality_amount" class="form-label">Required Penality (₹)</label>
                            <input type="number" class="form-control" id="penality_amount" name="penality_amount" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="penality_paid_amount" class="form-label">Paid Penality (₹)</label>
                            <input type="number" class="form-control" id="penality_paid_amount" name="penality_paid_amount" step="0.01" min="0">
                        </div>
                        <div class="col-md-4">
                            <label for="amount" class="form-label">Total Paid Amount (₹)</label>
                            <input type="number" class="form-control" id="amount" name="amount" required min="1" step="0.01">
                        </div>
                    </div>


                    
                    <!-- Third row: Payment Method and Transaction ID -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="payment_method" class="form-label">Payment Method</label>
                            <select class="form-select" id="payment_method" name="payment_method" required>
                                <option value="">Select Payment Method</option>
                                <option value="Cash">Cash</option>
                                <option value="Bank Transfer">Bank Transfer</option>
                                <option value="UPI">UPI</option>
                                <option value="Cheque">Cheque</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="transaction_id" class="form-label">Transaction ID</label>
                            <input type="text" class="form-control" id="transaction_id" name="transaction_id">
                        </div>
                        <div class="col-md-4">
                            <label for="deposit_status" class="form-label">Status</label>
                            <select class="form-select" id="deposit_status" name="status" required>
                                <option value="Approved" selected>Approved</option>
                                <option value="Pending">Pending</option>
                                <option value="Rejected">Rejected</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Fourth row: Notes -->
                    <div class="mb-3">
                        <label for="notes" class="form-label">Notes</label>
                        <textarea class="form-control" id="notes" name="notes" rows="2"></textarea>
                    </div>                   
                    
                </form>
            </div>
            <div class="modal-footer">
                <input type="hidden" id="deposit_setting_id" name="deposit_setting_id">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitAddDepositForm()">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Deposit Modal -->
<div class="modal fade" id="editDepositModal" tabindex="-1" aria-labelledby="editDepositModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editDepositModalLabel">Edit Deposit</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editDepositForm">
                    <input type="hidden" id="edit_deposit_id" name="deposit_id">
                    <input type="hidden" id="edit_setting_id" name="setting_id">
                    
                    <!-- First row: Annual Rate and Required Amount -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="edit_per_day_rate" class="form-label">Per Day Rate (%)</label>
                            <input type="number" class="form-control" id="edit_per_day_rate" name="annual_rate" required min="0.01" step="0.01" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="edit_required_amount" class="form-label">Required Amount (₹)</label>
                            <input type="number" class="form-control" id="edit_required_amount" name="required_amount" required min="1" step="0.01" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="edit_payment_interval" class="form-label">Payment Interval</label>
                            <input type="text" class="form-control" id="edit_payment_interval" name="payment_interval" required readonly disabled>
                        </div>
                    </div>
                    
                    <!-- Second row: Paid Amount, Penalty Amount and Penalty Paid Amount -->
                    <div class="row mb-3">                        
                        <div class="col-md-4">
                            <label for="edit_penalty_amount" class="form-label">Required Penality (₹)</label>
                            <input type="number" class="form-control" id="edit_penalty_amount" name="penality_amount" step="0.01" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="edit_penalty_paid_amount" class="form-label">Paid Penality (₹)</label>
                            <input type="number" class="form-control" id="edit_penalty_paid_amount" name="penality_paid_amount" min="0" step="0.01" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="total_interest" class="form-label">Total Interest (₹)</label>
                            <input type="number" class="form-control" id="edit_total_interest" name="total_interest" required min="0" step="0.01" oninput="updateTotalPaidAmountFromInterest()">
                        </div>
                        
                    </div>
                    
                    <!-- Third row: Payment Method and Transaction ID -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="edit_amount" class="form-label">Total Paid Amount (₹)</label>
                            <input type="number" class="form-control" id="edit_amount" name="amount" required min="1" step="0.01" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="edit_payment_method" class="form-label">Payment Method</label>
                            <select class="form-select" id="edit_payment_method" name="payment_method" required readonly disabled>
                                <option value="">Select Payment Method</option>
                                <option value="Cash">Cash</option>
                                <option value="Bank Transfer">Bank Transfer</option>
                                <option value="UPI">UPI</option>
                                <option value="Cheque">Cheque</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="edit_transaction_id" class="form-label">Transaction ID</label>
                            <input type="text" class="form-control" id="edit_transaction_id" name="transaction_id" readonly disabled>
                        </div>
                    </div>

                    <!-- Fourth row: Payment Method and Transaction ID -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="edit_status" class="form-label">Status</label>
                            <select class="form-select" id="edit_status" name="status" required>
                                <option value="Approved">Approved</option>
                                <option value="Pending">Pending</option>
                                <option value="Rejected">Rejected</option>
                            </select>    
                        </div>                            
                    </div>
                    
                    <!-- Fifth row: Notes -->
                    <div class="mb-3">
                        <label for="edit_comments" class="form-label">Notes</label>
                        <textarea class="form-control" id="edit_comments" name="comments" rows="2"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitEditDepositForm()">Update</button>
            </div>
            <div id="editModalError" class="alert alert-danger mt-2" style="display: none;"></div>
        </div>
    </div>
</div>

<!-- View Deposit Details Modal -->
<div class="modal fade" id="viewDepositModal" tabindex="-1" aria-labelledby="viewDepositModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewDepositModalLabel">Deposit Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Date:</div>
                            <div class="col-6 info-value" id="view_date"></div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Per Day Rate:</div>
                            <div class="col-6 info-value" id="view_per_day_rate"></div>
                        </div>
                    </div>                    
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Required Amount:</div>
                            <div class="col-6 info-value" id="view_required_amount"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Payment Interval:</div>
                            <div class="col-6 info-value" id="view_payment_interval"></div>
                        </div>
                    </div>                    
                </div>


                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Total Days:</div>
                            <div class="col-6 info-value" id="view_total_days"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Total Interest:</div>
                            <div class="col-6 info-value" id="view_interest_amount"></div>
                        </div>
                    </div>
                </div>


                <!-- Penalty Amount and Penalty Paid Amount in one row -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Penalty Amount:</div>
                            <div class="col-6 info-value" id="view_penalty_amount"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Penalty Paid:</div>
                            <div class="col-6 info-value" id="view_penalty_paid_amount"></div>
                        </div>
                    </div>
                </div>
                
                <!-- Payment Method and Transaction ID in one row -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Paid Amount:</div>
                            <div class="col-6 info-value" id="view_amount"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Total Amount:</div>
                            <div class="col-6 info-value" id="view_total_amount"></div>
                        </div>
                    </div>                    
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Payment Method:</div>
                            <div class="col-6 info-value" id="view_payment_method"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Transaction ID:</div>
                            <div class="col-6 info-value" id="view_transaction_id"></div>
                        </div>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-4 info-label">Notes:</div>
                    <div class="col-8 info-value" id="view_notes"></div>
                </div>              
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Interest Added:</div>
                            <div class="col-6 info-value" id="view_interest_added"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Status:</div>
                            <div class="col-6 info-value">
                                <span class="status-badge" id="view_status_badge"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- RD Settings Modal -->
<div class="modal fade" id="rdSettingsModal" tabindex="-1" aria-labelledby="rdSettingsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rdSettingsModalLabel">Recurring Deposit Settings</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="rdSettingsForm">
                    <input type="hidden" id="rd_user_id" name="user_id" value="<%= member.id %>">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="rd_amount" class="form-label">Amount (₹)</label>
                            <input type="number" class="form-control" id="rd_amount" name="amount" required min="1" step="1" placeholder="Enter amount" value="0">
                        </div>
                        <div class="col-md-6">
                            <label for="annual_rate" class="form-label">Annual Rate (%)</label>
                            <input type="number" class="form-control" id="annual_rate" name="annual_rate" required min="0.01" step="0.01" placeholder="Enter annual interest rate">
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="penality_rate" class="form-label">Penality Rate (per day) (₹)</label>
                            <input type="number" class="form-control" id="penality_rate" name="penality_rate" required min="0.50" step="0.50" placeholder="Enter penality rate">
                        </div>                    
                        <div class="col-md-6">
                            <label for="duration" class="form-label">Duration</label>
                            <select class="form-select" id="duration" name="duration" required>
                                <option value="">Select Duration</option>
                                <option value="6">Half Year</option>
                                <option value="12">1 Year</option>
                                <option value="24">2 Years</option>
                                <option value="36">3 Years</option>
                                <option value="48">4 Years</option>
                                <option value="60">5 Years</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="payment_interval" class="form-label">Payment Interval</label>
                            <select class="form-select" id="payment_interval" name="payment_interval" required>
                                <option value="">Select Payment Interval</option>
                                <option value="Daily">Daily</option>
                                <option value="Monthly">Monthly</option>
                                <option value="Quarterly">Quarterly</option>
                                <option value="Half Yearly">Half Yearly</option>
                                <option value="Yearly">Yearly</option>
                            </select>
                        </div>
                    </div>
                    
                </form>

                <div class="mt-4">
                    <h6>Current RD Settings</h6>
                    <div id="rdSettingsList" class="table-responsive">
                        <table class="table table-sm table-hover">
                            <thead>
                                <tr>
                                    <th>RD ID</th>
                                    <th>Annual Rate</th>
                                    <th>Payment Interval</th>
                                    <th>Amount</th>
                                    <th>Penality Rate</th>
                                    <th>Duration</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                    
                                </tr>
                            </thead>
                            <tbody id="rdSettingsTableBody">
                                <!-- Settings will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="submitRDSettingsForm()">Save Settings</button>
            </div>
        </div>
    </div>
</div>

<%- contentFor('script') %>
<script>
    // Global variables
    let hasActiveRDSettings = false;
    let currentDeposits = <%- JSON.stringify(deposits || []) %>; // Store the current deposits data
    
    // Add event listener to refresh page when RD Settings modal is closed
    document.addEventListener('DOMContentLoaded', function() {
        const rdSettingsModal = document.getElementById('rdSettingsModal');
        if (rdSettingsModal) {
            rdSettingsModal.addEventListener('hidden.bs.modal', function() {
                // Refresh the page when the modal is closed
                window.location.reload();
            });
        }
    });
    
    
    // Helper function    // Format currency helper function
    function formatCurrency(amount) {
        if (!amount) return '₹0.00';
        return new Intl.NumberFormat('en-IN', { 
            style: 'currency', 
            currency: 'INR',
            minimumFractionDigits: 2
        }).format(amount);
    }
    
    // Helper function to enable/disable buttons based on setting status
    function updateButtonStates(isActive) {
        const addNewDepositBtn = document.getElementById('addNewDepositBtn');
        const calculateBtn = document.getElementById('calculateButton');
        const settlementBtn = document.getElementById('settlementButton');
        
        if (addNewDepositBtn) {
            if (!isActive) {
                // Disable Add New Deposit button
                addNewDepositBtn.disabled = true;
                addNewDepositBtn.setAttribute('disabled', 'disabled');
                addNewDepositBtn.removeAttribute('data-bs-toggle');
                addNewDepositBtn.removeAttribute('data-bs-target');
                addNewDepositBtn.classList.add('opacity-50');
                addNewDepositBtn.title = 'Only available for active RD settings';
            } else {
                // Enable Add New Deposit button
                addNewDepositBtn.disabled = false;
                addNewDepositBtn.removeAttribute('disabled');
                addNewDepositBtn.setAttribute('data-bs-toggle', 'modal');
                addNewDepositBtn.setAttribute('data-bs-target', '#addDepositModal');
                addNewDepositBtn.classList.remove('opacity-50');
                addNewDepositBtn.title = '';
            }
        }
        
        if (calculateBtn) {
            if (!isActive) {
                // Disable Calculate button
                calculateBtn.disabled = true;
                calculateBtn.setAttribute('disabled', 'disabled');
                calculateBtn.classList.add('opacity-50');
                calculateBtn.title = 'Only available for active RD settings';
            } else {
                // Enable Calculate button
                calculateBtn.disabled = false;
                calculateBtn.removeAttribute('disabled');
                calculateBtn.classList.remove('opacity-50');
                calculateBtn.title = '';
            }
        }
        
        if (settlementBtn) {
            if (!isActive) {
                // Disable Settlement button
                settlementBtn.disabled = true;
                settlementBtn.setAttribute('disabled', 'disabled');
                settlementBtn.classList.add('opacity-50');
                settlementBtn.title = 'Only available for active RD settings';
            } else {
                // Enable Settlement button
                settlementBtn.disabled = false;
                settlementBtn.removeAttribute('disabled');
                settlementBtn.classList.remove('opacity-50');
                settlementBtn.title = '';
            }
        }
    }
    
    // Initialize the selected setting ID with the active setting and handle button states
    document.addEventListener('DOMContentLoaded', function() {
        // Check if setting is active and set button states accordingly
        let isActive = false;
        <% if (activeSetting && (activeSetting.is_active === true || activeSetting.is_active === 1 || String(activeSetting.is_active) === '1')) { %>
            isActive = true;
        <% } %>
        console.log('Setting active status:', isActive);
        
        // Initialize the selected setting ID if an active setting exists
        const activeSettingId = '<%= activeSetting ? activeSetting.id : "" %>';
        if (activeSettingId) {
            document.getElementById('selected_setting_id').value = activeSettingId;
        }
        
        // Update button states based on setting status
        updateButtonStates(isActive);
    });
    
    // Check for RD Settings on page load
    document.addEventListener('DOMContentLoaded', function() {
        checkRDSettings();
    });
    
    // Function to handle RD setting selection from dropdown
    function loadSelectedRDSetting(settingId) {
        if (!settingId) return;
        
        document.getElementById('selected_setting_id').value = settingId;
        
        // Show loading indicator
        document.getElementById('totalPrincipalValue').innerHTML = '<small>Loading...</small>';
        document.getElementById('totalInterestValue').innerHTML = '<small>Loading...</small>';
        document.getElementById('totalPenaltyValue').innerHTML = '<small>Loading...</small>';
        document.getElementById('totalNetValue').innerHTML = '<small>Loading...</small>';
        document.getElementById('settingStatusValue').innerHTML = '<small>Loading...</small>';
        
        // Fetch data for the selected setting
        fetch('/recurring-deposits/rd-deposits-by-setting?setting_id=' + settingId)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the totals
                    document.getElementById('totalPrincipalValue').textContent = formatCurrency(data.totals.totalPrincipal);
                    document.getElementById('totalInterestValue').textContent = formatCurrency(data.totals.totalInterest);
                    document.getElementById('totalPenaltyValue').textContent = formatCurrency(data.totals.totalPenalty);
                    document.getElementById('totalNetValue').textContent = formatCurrency(data.totals.totalNet);
                    
                    // Use the setting status from the API response
                    if (data.settingStatus) {
                        let statusText = 'N/A';
                        const isActive = data.settingStatus === 'Active';
                        
                        if (isActive) {
                            statusText = '<span class="badge bg-success">Active</span>';
                        } else if (data.settingStatus === 'Closed') {
                            statusText = '<span class="badge bg-warning">Closed</span>';
                        } else {
                            statusText = '<span class="badge bg-danger">Inactive</span>';
                        }
                        
                        // Update button states based on setting status
                        updateButtonStates(isActive);
                        
                        document.getElementById('settingStatusValue').innerHTML = statusText;
                    }
                    // Update deposits table and store the new data
                    currentDeposits = data.deposits;
                    updateDepositTable(data.deposits);
                    
                    // Update URL without refreshing the page
                    history.pushState(null, '', window.location.pathname + '?setting_id=' + settingId);
                } else {
                    console.error('Error loading data for setting:', data.message);
                    alert('Error loading data for the selected setting2');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while loading data for the selected setting');
            });
    }
    
    // Format currency helper function
    function formatCurrency(amount) {
        return new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(amount || 0);
    }
    
    // Function to update the deposit history table
    function updateDepositTable(deposits) {
        const tableBody = document.querySelector('table.table-hover tbody');
        if (!tableBody) return;
        
        tableBody.innerHTML = '';
        
        if (deposits && deposits.length > 0) {
            deposits.forEach((deposit, index) => {
                const row = document.createElement('tr');
                
                // Format the date
                const depositDate = new Date(deposit.deposit_date);
                const formattedDate = depositDate.toLocaleDateString('en-IN');
                
                // Create status badge class based on status
                const statusClass = deposit.status === 'Approved' ? 'status-approved' : 
                                   deposit.status === 'Rejected' ? 'status-rejected' : 'status-pending';
                
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${formattedDate}</td>
                    <td>${formatCurrency(deposit.required_amount)}</td>
                    <td>${deposit.payment_method || 'N/A'}</td>
                    <td>${deposit.transaction_id || 'N/A'}</td>
                    <td>${parseFloat(deposit.per_day_rate).toFixed(2)}%</td>
                    <td>${deposit.payment_interval || 'N/A'}</td>
                    <td>${formatCurrency(deposit.interest_amount || 0)}</td>
                    <td>${formatCurrency(deposit.penality_paid_amount || 0)}</td>
                    <td>${formatCurrency(deposit.total_amount || 0)}</td>
                    <td><span class="status-badge ${statusClass}">${deposit.status}</span></td>
                    <td>
                        <div class="button-group">
                            <button class="btn btn-sm btn-warning" 
                                onclick="openEditDepositModal('${deposit.id}', '${deposit.amount}', '${deposit.payment_method}', '${deposit.transaction_id}', '${deposit.comments}', '${deposit.status}')" 
                                ${deposit.status === 'Closed' ? 'disabled="disabled"' : ''}>
                                <i class="bx bx-edit"></i> Edit
                            </button>
                            <button class="btn btn-sm btn-info" 
                                onclick="viewDepositDetails('${deposit.id}')">
                                <i class="bx bx-info-circle"></i> View
                            </button>
                        </div>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });
        } else {
            const row = document.createElement('tr');
            row.innerHTML = '<td colspan="12" class="text-center">No deposits found for this RD setting</td>';
            tableBody.appendChild(row);
        }
    }
    
    // Function to check if RD settings exist and open modal if not
    function checkRDSettings() {
        const userId = document.getElementById('rd_user_id').value;
        fetch('/recurring-deposits/rd-settings?user_id=' + userId)
            .then(function(response) { return response.json(); })
            .then(function(data) {
                if (data.success) {
                    const settings = data.settings;
                    hasActiveRDSettings = settings && settings.some(function(setting) { return setting.is_active; });
                    
                    if (!hasActiveRDSettings) {
                        // No active RD settings found, open the settings modal
                        const rdSettingsModal = new bootstrap.Modal(document.getElementById('rdSettingsModal'));
                        rdSettingsModal.show();
                        
                        // Show warning message
                        const warningDiv = document.createElement('div');
                        warningDiv.className = 'alert alert-warning mb-3';
                        warningDiv.id = 'rdSettingsWarning';
                        warningDiv.innerHTML = '<strong>Important:</strong> You must set up Recurring Deposit settings before proceeding with any actions.';
                        document.querySelector('.welcome-section').appendChild(warningDiv);
                        
                        // Disable all action buttons
                        disableAllActions();
                    } else {
                        // Enable all action buttons if there are active RD settings
                        enableAllActions();
                    }
                } else {
                    console.error('Error checking RD settings:', data.message);
                }
            })
            .catch(function(error) {
                console.error('Error:', error);
            });
    }
    
    // Function to disable all action buttons
    function disableAllActions() {
        // Disable the Add Deposit button
        const addDepositBtn = document.querySelector('button[data-bs-target="#addDepositModal"]');
        if (addDepositBtn) {
            addDepositBtn.disabled = true;
            addDepositBtn.title = 'Please set up RD settings first';
        }
        
        // Disable the Calculate button
        const calculateBtn = document.getElementById('calculateButton');
        if (calculateBtn) {
            calculateBtn.disabled = true;
            calculateBtn.title = 'Please set up RD settings first';
        }
        
        // Disable all Edit buttons in the deposit history table
        const editButtons = document.querySelectorAll('button.btn-warning');
        editButtons.forEach(function(btn) {
            btn.disabled = true;
            btn.title = 'Please set up RD settings first';
        });
        
        // Disable other action buttons if any
        const actionButtons = document.querySelectorAll('.action-btn');
        actionButtons.forEach(function(btn) {
            btn.disabled = true;
            btn.title = 'Please set up RD settings first';
        });
    }
    
    // Function to enable all action buttons
    function enableAllActions() {
        // Enable the Add Deposit button
        const addDepositBtn = document.querySelector('button[data-bs-target="#addDepositModal"]');
        if (addDepositBtn) {
            addDepositBtn.disabled = false;
            addDepositBtn.title = '';
        }
        
        // Enable the Calculate button
        const calculateBtn = document.getElementById('calculateButton');
        if (calculateBtn) {
            calculateBtn.disabled = false;
            calculateBtn.title = '';
        }
        
        // Enable all Edit buttons in the deposit history table
        const editButtons = document.querySelectorAll('button.btn-warning');
        editButtons.forEach(function(btn) {
            btn.disabled = false;
            btn.title = '';
        });
        
        // Enable other action buttons if any
        const actionButtons = document.querySelectorAll('.action-btn');
        actionButtons.forEach(function(btn) {
            btn.disabled = false;
            btn.title = '';
        });
        
        // Remove warning message if exists
        const warningDiv = document.getElementById('rdSettingsWarning');
        if (warningDiv) {
            warningDiv.remove();
        }
    }
    
    // Load RD Settings when Add Deposit Modal is opened
    document.getElementById('addDepositModal').addEventListener('show.bs.modal', function () {
        loadActiveRDSettingForDeposit();
    });
    
   

    
    // Function to load active RD Setting for deposit
    function loadActiveRDSettingForDeposit() {
        const userId = '<%= member.id %>'; 
        let settingId = document.getElementById('selected_setting_id').value;
        
        // If selected_setting_id is empty, get the value from the dropdown
        if (!settingId) {
            const dropdown = document.getElementById('rdSettingDropdown');
            if (dropdown && dropdown.value) {
                settingId = dropdown.value;
                // Update the hidden field
                document.getElementById('selected_setting_id').value = settingId;
            }
        }
        
        fetch('/recurring-deposits/rd-settings?user_id=' + userId + '&setting_id=' + settingId)
            .then(function(response) { return response.json(); })
            .then(function(data) {
                if (data.success) {
                    // Find active setting
                    //const activeSetting = data.settings.find(setting => setting.is_active);
                    const activeSetting = data.settings;
                    
                    if (activeSetting) {
                        // Set the values in the form
                        document.getElementById('deposit_per_day_rate').value = parseFloat(activeSetting.annual_rate/365).toFixed(2);
                        document.getElementById('required_amount').value = activeSetting.amount;
                        document.getElementById('deposit_payment_interval').value = activeSetting.payment_interval;
                        document.getElementById('amount').value = activeSetting.amount;
                        document.getElementById('deposit_setting_id').value = activeSetting.id;
                        
                        // Calculate penalty amount based on grace period and days from start of month
                        calculatePenaltyAmount(activeSetting.penality_rate);
                        
                        // Enable all action buttons
                        enableAllActions();
                    } else {
                        alert('No active RD Setting found. Please create an active RD Setting first.');
                        // Close the modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('addDepositModal'));
                        modal.hide();
                        
                        // Open the RD Settings modal
                        const rdSettingsModal = new bootstrap.Modal(document.getElementById('rdSettingsModal'));
                        rdSettingsModal.show();
                        
                        // Disable all action buttons
                        disableAllActions();
                    }
                } else {
                    console.error('Error loading RD settings:', data.message);
                    alert('Error loading RD settings: ' + data.message);
                }
            })
            .catch(function(error) {
                console.error('Error:', error);
                alert('An error occurred while loading RD settings.');
            });
    }
    
    // Function to calculate penalty amount based on grace period and days from start of month
    function calculatePenaltyAmount(penalityRate) {
        // Get the current date
        const currentDate = new Date();
        
        // Get the first day of the current month
        const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
        
        // Calculate days elapsed from start of month to current date
        const daysElapsed = Math.floor((currentDate - firstDayOfMonth) / (24 * 60 * 60 * 1000));
        
        // Get the grace period from environment variable (defined server-side)
        const gracePeriod = parseInt('<%= process.env.RD_PENALTY_GRACE_PERIOD || 15 %>');
        // Initialize penalty amount
        let penaltyAmount = 0;
        // Check if current date is beyond grace period
        if (daysElapsed > gracePeriod) {
            penaltyAmount = daysElapsed * parseFloat(penalityRate);
        }        
        // Set the penalty amount in the form
        document.getElementById('penality_amount').value = penaltyAmount.toFixed(2);
        
        // Initialize penalty paid amount to the same value (user can adjust if needed)
        document.getElementById('penality_paid_amount').value = penaltyAmount.toFixed(2);
        
        // Update the total paid amount to include the penalty paid amount
        updateTotalPaidAmount();
        
        return penaltyAmount;
    }
    
    // Function to update the total paid amount when penalty paid amount changes
    function updateTotalPaidAmount() {
        const penalityPaidAmount = parseFloat(document.getElementById('penality_paid_amount').value) || 0;
        const requiredAmount = parseFloat(document.getElementById('required_amount').value) || 0;
        
        // Update the total amount field
        document.getElementById('amount').value = (requiredAmount + penalityPaidAmount).toFixed(2);
        
        // Set the min attribute to ensure the total paid amount cannot be less than required amount
        document.getElementById('amount').setAttribute('min', requiredAmount);
    }
    
    // Function to update the Total Paid Amount when Total Interest value changes in Edit form
    function updateTotalPaidAmountFromInterest() {
        const depositAmount = parseFloat(document.getElementById('edit_required_amount').value) || 0;
        const totalInterest = parseFloat(document.getElementById('edit_total_interest').value) || 0;
        
        // Calculate the new total amount (deposit amount + interest)
        const totalAmount = depositAmount + totalInterest;
        
        // Update the Total Paid Amount field
        document.getElementById('edit_amount').value = totalAmount.toFixed(2);
    }
    
    // Add event listeners to penalty paid amount fields to update the total paid amount when they change
    document.addEventListener('DOMContentLoaded', function() {
        // For Add Deposit form
        const penalityPaidAmountInput = document.getElementById('penality_paid_amount');
        if (penalityPaidAmountInput) {
            penalityPaidAmountInput.addEventListener('input', updateTotalPaidAmount);
        }
        
        // For Edit Deposit form
        const editPenalityPaidAmountInput = document.getElementById('edit_penalty_paid_amount');
        if (editPenalityPaidAmountInput) {
            editPenalityPaidAmountInput.addEventListener('input', updateEditTotalPaidAmount);
        }
    });
    
    // Function to update the total paid amount in the Edit form when penalty paid amount changes
    function updateEditTotalPaidAmount() {
        // Get the required amount (regular payment amount)
        const requiredAmount = parseFloat(document.getElementById('edit_required_amount').value) || 0;
        
        // Get the penalty paid amount
        const penalityPaidAmount = parseFloat(document.getElementById('edit_penalty_paid_amount').value) || 0;
        
        // Calculate the total paid amount (required amount + penalty paid amount)
        const totalPaidAmount = requiredAmount + penalityPaidAmount;
        
        // Update the paid amount field
        document.getElementById('edit_amount').value = totalPaidAmount.toFixed(2);
        
        // Set the min attribute to ensure the total paid amount cannot be less than required amount
        document.getElementById('edit_amount').setAttribute('min', requiredAmount);
    }
    
    // Function to submit the Add Deposit form
    function submitAddDepositForm() {
        const form = document.getElementById('addDepositForm');
        
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        // Ensure we're using the selected setting ID
        const settingId = document.getElementById('selected_setting_id').value;
        if (settingId) {
            document.getElementById('deposit_setting_id').value = settingId;
        }
        
        // Additional validation to ensure Total Paid Amount is not less than Required Amount
        const requiredAmount = parseFloat(document.getElementById('required_amount').value) || 0;
        const totalPaidAmount = parseFloat(document.getElementById('amount').value) || 0;
        
        if (totalPaidAmount < requiredAmount) {
            alert('Total Paid Amount cannot be less than Required Amount (' + requiredAmount.toFixed(2) + ')');
            return;
        }
        
        // Show loading state on the button
        const saveButton = document.querySelector('#addDepositModal .modal-footer .btn-primary');
        const originalText = saveButton.textContent;
        saveButton.textContent = 'Saving...';
        saveButton.disabled = true;
        
        
        // Get form values
        const per_day_rate = document.getElementById('deposit_per_day_rate').value;
        const required_amount = document.getElementById('required_amount').value;
        const payment_interval = document.getElementById('deposit_payment_interval').value;
        const amount = document.getElementById('amount').value;
        const payment_method = document.getElementById('payment_method').value;
        const transaction_id = document.getElementById('transaction_id').value;
        const notes = document.getElementById('notes').value;
        const status = document.getElementById('deposit_status').value;
        const setting_id = document.getElementById('deposit_setting_id').value;
        const penality_amount = document.getElementById('penality_amount').value;
        const penality_paid_amount = document.getElementById('penality_paid_amount').value;
        
        // Send request to the server
        fetch(`/recurring-deposits/recurring-deposit/<%= member.id %>`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                per_day_rate,
                required_amount,
                payment_interval,
                amount,
                payment_method,
                transaction_id,
                comments: notes,
                status,
                setting_id,
                penality_amount,
                penality_paid_amount
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Reset form
                form.reset();
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addDepositModal'));
                modal.hide();
                
                // Show success message
                alert('Deposit added successfully!');
                
                // Reload page to show new deposit
                window.location.reload();
            } else {
                alert('Error: ' + data.message);
                
                // Reset button state
                saveButton.textContent = originalText;
                saveButton.disabled = false;
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while adding the deposit.');
            
            // Reset button state
            saveButton.textContent = originalText;
            saveButton.disabled = false;
        });
    }
    
    // Function to handle deposit calculation
    function calculateDeposits() {
        // Show a loader or spinner
        const loader = document.getElementById('loader');
        if (loader) {
            loader.style.display = 'block';
        }
        
        // Disable all buttons and inputs to prevent user interaction
        const buttons = document.querySelectorAll('button');
        const inputs = document.querySelectorAll('input, select, textarea');
        
        buttons.forEach(button => button.disabled = true);
        inputs.forEach(input => input.disabled = true);
        
        // Get the user ID
        const userId = '<%= member.id %>';

        let settingId = document.getElementById('selected_setting_id').value;
        
        // If selected_setting_id is empty, get the value from the dropdown
        if (!settingId) {
            const dropdown = document.getElementById('rdSettingDropdown');
            if (dropdown && dropdown.value) {
                settingId = dropdown.value;
                // Update the hidden field
                document.getElementById('selected_setting_id').value = settingId;
            }
        }
        
        // Send request to the server
        fetch(`/recurring-deposits/calculate-recurring-deposits/${userId}?setting_id=${settingId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            // Hide the loader
            if (loader) {
                loader.style.display = 'none';
            }
            
            // Re-enable all buttons and inputs
            buttons.forEach(button => button.disabled = false);
            inputs.forEach(input => input.disabled = false);
            
            if (data.success) {
                // Show success message
                alert(`Total ${data.count} records deposits calculated successfully`);
                
                // Update totals in the UI if they were returned
                if (data.totals) {
                    document.getElementById('totalPrincipalValue').innerHTML = formatCurrency(data.totals.principal);
                    document.getElementById('totalInterestValue').innerHTML = formatCurrency(data.totals.interest);
                    document.getElementById('totalPenaltyValue').innerHTML = formatCurrency(data.totals.penalty);
                    document.getElementById('totalNetValue').innerHTML = formatCurrency(data.totals.netAmount);
                    
                    // Reload the deposits table without refreshing the page
                    loadSelectedRDSetting(settingId);
                } else {
                    // Reload the page to show updated values if totals weren't returned
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                }
            } else {
                // Show error message
                alert('Error: ' + (data.message || 'An error occurred during calculation.'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            
            // Hide the loader
            if (loader) {
                loader.style.display = 'none';
            }
            
            // Re-enable all buttons and inputs
            buttons.forEach(button => button.disabled = false);
            inputs.forEach(input => input.disabled = false);
            
            // Show error message
            alert('An error occurred during calculation. Please try again.');
        });
    }
       

    
    // Edit Deposit Modal
    function openEditDepositModal(id, amount, payment_method, transaction_id, notes, status) {
        console.log('openEditDepositModal called with id:', id);
        
        // Check if the deposit is closed - prevent editing
        if (status === 'Closed') {
            alert('Closed deposits cannot be edited.');
            return;
        }
        
        // Use the current deposits data (which may have been updated by the dropdown selection)
        const depositsData = currentDeposits;
        console.log('Current deposits data:', depositsData);
        
        const deposit = depositsData.find(function(d) { 
            return String(d.id) === String(id); 
        });
        console.log('Found deposit:', deposit);
        
        if (!deposit) {
            alert('Deposit details not found.');
            return;
        }
        
        // If deposit doesn't have a setting_id, use the currently selected setting ID or fetch the latest
        if(!deposit.setting_id){
            // First try to use the currently selected setting ID
            const selectedSettingId = document.getElementById('selected_setting_id').value;
            
            if (selectedSettingId) {
                document.getElementById('edit_setting_id').value = selectedSettingId;
                
                // Get the current setting details from the dropdown
                const dropdown = document.getElementById('rdSettingDropdown');
                if (dropdown) {
                    const selectedOption = dropdown.options[dropdown.selectedIndex];
                    if (selectedOption) {
                        // Extract rate from the option text (format: "RD1 - ₹1,000.00/Monthly (8%)")
                        const optionText = selectedOption.text;
                        const rateMatch = optionText.match(/(\d+(\.\d+)?)%/);
                        if (rateMatch && rateMatch[1]) {
                            const annualRate = parseFloat(rateMatch[1]);
                            document.getElementById('edit_per_day_rate').value = (annualRate/365).toFixed(2);
                        }
                    }
                }
            } else {
                // If no selected setting ID, get the user ID and fetch settings
                const userId = '<%= member.id %>';
                
                // Fetch the latest active setting for this user
                fetch('/recurring-deposits/rd-settings?user_id=' + userId)
                .then(function(response) { return response.json(); })
                .then(function(data) {
                    if (data.success && data.settings && data.settings.length > 0) {
                        // Find active setting
                        const activeSetting = data.settings.find(function(setting) { 
                            return setting.is_active; 
                        });
                        
                        if (activeSetting) {
                            // Set the values from the active setting
                            document.getElementById('edit_per_day_rate').value = parseFloat(activeSetting.annual_rate/365).toFixed(2) || '';
                            document.getElementById('edit_required_amount').value = activeSetting.amount || '';
                            document.getElementById('edit_payment_interval').value = activeSetting.payment_interval || 'Monthly';
                            document.getElementById('edit_setting_id').value = activeSetting.id;
                        }
                    }
                })
                .catch(function(error) {
                    console.error('Error fetching CD settings:', error);
                });
            }
        }
        
        // Always proceed since we already checked deposit exists
        document.getElementById('edit_deposit_id').value = id;
        document.getElementById('edit_setting_id').value = deposit.setting_id || document.getElementById('selected_setting_id').value || '';
        document.getElementById('edit_amount').value = deposit.amount || deposit.total_amount || '0.00';
        document.getElementById('edit_per_day_rate').value = deposit.per_day_rate || '';
        document.getElementById('edit_required_amount').value = deposit.required_amount || '';
        document.getElementById('edit_payment_interval').value = deposit.payment_interval || 'Monthly';
        document.getElementById('edit_payment_method').value = deposit.payment_method || '';
        document.getElementById('edit_transaction_id').value = deposit.transaction_id || '';
        document.getElementById('edit_penalty_amount').value = deposit.penality_amount || '0.00';
        document.getElementById('edit_penalty_paid_amount').value = deposit.penality_paid_amount || '0.00';
        document.getElementById('edit_total_interest').value = deposit.interest_amount || '0.00';
        document.getElementById('edit_comments').value = deposit.comments || '';
        document.getElementById('edit_status').value = deposit.status || 'Approved';
            
        // Hide any previous error messages
        document.getElementById('editModalError').style.display = 'none';
        
        // Show the modal
        const modal = new bootstrap.Modal(document.getElementById('editDepositModal'));
        modal.show();
    }
    
    // Edit Deposit Form Submission
    function submitEditDepositForm() {
        const form = document.getElementById('editDepositForm');
        
        // Ensure we're using the selected setting ID
        const settingId = document.getElementById('selected_setting_id').value;
        if (settingId) {
            document.getElementById('edit_setting_id').value = settingId;
        }
        
        // Add custom validation for required fields
        const amountValue = document.getElementById('edit_amount').value;
        const paymentMethodValue = document.getElementById('edit_payment_method').value;
        const statusValue = document.getElementById('edit_status').value;
        
        // Check required fields manually
        if (!amountValue || !paymentMethodValue || !statusValue) {
            alert('Please fill in all required fields: Paid Amount, Payment Method, and Status');
            return;
        }
        
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        // Additional validation to ensure Total Paid Amount is not less than Required Amount
        const requiredAmount = parseFloat(document.getElementById('edit_required_amount').value) || 0;
        const totalPaidAmount = parseFloat(document.getElementById('edit_amount').value) || 0;
        
        if (totalPaidAmount < requiredAmount) {
            alert('Total Paid Amount cannot be less than Required Amount (' + requiredAmount.toFixed(2) + ')');
            return;
        }
        
        const depositId = document.getElementById('edit_deposit_id').value;
        const per_day_rate = document.getElementById('edit_per_day_rate').value;
        const required_amount = document.getElementById('edit_required_amount').value;
        const payment_interval = document.getElementById('edit_payment_interval').value;
        const transaction_id = document.getElementById('edit_transaction_id').value || '';
        const penality_amount = document.getElementById('edit_penalty_amount').value || '0';
        const penality_paid_amount = document.getElementById('edit_penalty_paid_amount').value || '0';
        const total_interest = document.getElementById('edit_total_interest').value || '0';
        const comments = document.getElementById('edit_comments').value || '';
        
        // Get setting_id if available
        const settingIdField = document.getElementById('edit_setting_id');
        const setting_id = settingIdField ? settingIdField.value : null;
        
        // Show loading state on the update button
        const updateButton = document.querySelector('#editDepositModal .modal-footer .btn-primary');
        const originalText = updateButton.textContent;
        updateButton.textContent = 'Updating...';
        updateButton.disabled = true;
        
        fetch(`/recurring-deposits/recurring-deposit/${depositId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                amount: amountValue,
                per_day_rate,
                required_amount,
                payment_interval,
                payment_method: paymentMethodValue,
                transaction_id,
                penality_amount,
                penality_paid_amount,
                total_interest,
                comments,
                status: statusValue,
                setting_id: setting_id
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Close modal and reload page
                const modal = bootstrap.Modal.getInstance(document.getElementById('editDepositModal'));
                modal.hide();
                
                // Show success message
                alert('Deposit updated successfully!');
                
                // Reload page to show updated deposit
                window.location.reload();
            } else {
                alert('Error: ' + data.message);
                
                // Reset button state
                updateButton.textContent = originalText;
                updateButton.disabled = false;
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while updating the deposit.');
            
            // Reset button state
            updateButton.textContent = originalText;
            updateButton.disabled = false;
        });
    }
    
    // View Deposit Details
    function viewDepositDetails(depositId) {
        console.log('viewDepositDetails called with id:', depositId);
        
        // Use the current deposits data (which may have been updated by the dropdown selection)
        const depositsData = currentDeposits;
        console.log('Current deposits data for view:', depositsData);
        
        const deposit = depositsData.find(function(d) { 
            return String(d.id) === String(depositId); 
        });
        console.log('Found deposit for view:', deposit);
        
        if (deposit) {
            // Per Day Rate and Required Amount
            document.getElementById('view_per_day_rate').textContent = deposit.per_day_rate ? deposit.per_day_rate + '%' : 'N/A';
            document.getElementById('view_required_amount').textContent = '₹ ' + parseFloat(deposit.required_amount).toFixed(2);
            
            // Payment Interval and Paid Amount
            document.getElementById('view_payment_interval').textContent = deposit.payment_interval || 'N/A';
            document.getElementById('view_amount').textContent = '₹ ' + parseFloat(deposit.amount).toFixed(2);
            
            // Payment Method and Transaction ID
            document.getElementById('view_payment_method').textContent = deposit.payment_method || 'N/A';
            document.getElementById('view_transaction_id').textContent = deposit.transaction_id || 'N/A';
            
            // Penalty Amount and Penalty Paid Amount
            document.getElementById('view_penalty_amount').textContent = '₹ ' + parseFloat(deposit.penality_amount || 0).toFixed(2);
            document.getElementById('view_penalty_paid_amount').textContent = '₹ ' + parseFloat(deposit.penality_paid_amount || 0).toFixed(2);
            
            // Total Days and Total Interest
            const depositDate = new Date(deposit.deposit_date);
            const currentDate = new Date();
            const diffTime = Math.abs(currentDate - depositDate);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            document.getElementById('view_total_days').textContent = diffDays + ' days';
            document.getElementById('view_interest_amount').textContent = '₹ ' + parseFloat(deposit.interest_amount || 0).toFixed(2);
            
            // Interest Added status
            const interestAdded = deposit.interest_added === 1 || deposit.interest_added === true;
            document.getElementById('view_interest_added').textContent = interestAdded ? 'Yes' : 'No';
            
            // Total Amount
            document.getElementById('view_total_amount').textContent = '₹ ' + parseFloat(deposit.total_amount || 0).toFixed(2);
            
            // Notes
            document.getElementById('view_notes').textContent = deposit.comments || 'N/A';
            
            // Date
            document.getElementById('view_date').textContent = new Date(deposit.deposit_date).toLocaleDateString();
            
            // Status
            const statusBadge = document.getElementById('view_status_badge');
            statusBadge.textContent = deposit.status;
            statusBadge.className = 'status-badge status-' + deposit.status.toLowerCase();
            
            const modal = new bootstrap.Modal(document.getElementById('viewDepositModal'));
            modal.show();
        } else {
            alert('Deposit details not found.');
        }
    }
    
    // RD Settings Functions
    
    // Load RD Settings when modal is opened
    document.getElementById('rdSettingsModal').addEventListener('show.bs.modal', function () {
        loadRDSettings();
    });
    
    // Load RD Settings from the server
    function loadRDSettings() {
        const userId = document.getElementById('rd_user_id').value;
        fetch('/recurring-deposits/rd-settings?user_id=' + userId)
            .then(function(response) { return response.json(); })
            .then(function(data) {
                if (data.success) {
                    displayRDSettings(data.settings);
                } else {
                    console.error('Error loading RD settings:', data.message);
                    alert('Error loading RD settings: ' + data.message);
                }
            })
            .catch(function(error) {
                console.error('Error:', error);
                alert('An error occurred while loading RD settings.');
            });
    }
    
    // Display RD Settings in the table
    function displayRDSettings(settings) {
        const tableBody = document.getElementById('rdSettingsTableBody');
        tableBody.innerHTML = '';
        
        // Update global variable for active RD settings
        hasActiveRDSettings = settings && settings.some(function(setting) { return setting.is_active; });
        

        // Enable or disable action buttons based on active settings
        if (hasActiveRDSettings) {
            enableAllActions();
        } else {
            disableAllActions();
        }
        
        // Check if there's an active setting to determine if we should show the Add button
        const hasActiveSetting = settings && settings.some(function(setting) { return setting.is_active; });
        hasActiveRDSettings = hasActiveSetting; // Update global variable
        
        // If we have active settings now, enable all actions
        if (hasActiveSetting) {
            enableAllActions();
        } else {
            disableAllActions();
        }
        
        const addButton = document.querySelector('#rdSettingsModal .modal-footer .btn-primary');
        
        if (hasActiveSetting) {
            // If there's an active setting, disable the Add button
            addButton.textContent = 'Save Settings';
            // addButton.disabled = true;
            addButton.title = 'Deactivate the current active setting before adding a new one';
        } else {
            // If there's no active setting, enable the Add button
            addButton.textContent = 'Save Settings';
            addButton.disabled = false;
            addButton.title = '';
            
            // Remove any existing message
            const existingMessage = document.getElementById('rdSettingsList').querySelector('.alert');
            if (existingMessage) {
                existingMessage.remove();
            }
        }
        

        
        if (settings && settings.length > 0) {
            settings.forEach(function(setting) {
                const row = document.createElement('tr');
                
                // row.innerHTML = 
                //     '<td>' + parseFloat(setting.annual_rate).toFixed(2) + '%</td>' +
                //     '<td>' + setting.payment_interval + '</td>' +
                //     '<td>₹ ' + setting.amount + '</td>' +
                //     '<td>₹ ' + setting.penality_rate + '</td>' +
                //     '<td>' + setting.duration/12 + ' ' + (setting.duration == 1 ? 'Year' : 'Years') + '</td>' +
                //     '<td><span class="status-badge ' + (setting.is_active ? 'status-approved' : 'status-rejected') + '">' +
                //     (setting.is_active ? 'Active' : 'Inactive') + '</span></td>' +
                //     '<td><div class="button-group">' +
                //     '<button class="btn btn-sm btn-warning" onclick="editRDSetting(' + setting.id + ', ' + setting.annual_rate + ', \'' + setting.payment_interval + '\', ' + setting.amount + ', ' + setting.duration + ', ' + (setting.is_active ? 'true' : 'false') + ')">' +
                //     '<i class="bx bx-edit"></i></button>' +
                //     '<button class="btn btn-sm btn-' + (setting.is_active ? 'danger' : 'success') + '" onclick="toggleRDSettingStatus(' + setting.id + ', ' + (!setting.is_active ? 'true' : 'false') + ')">' +
                //     '<i class="bx bx-' + (setting.is_active ? 'power-off' : 'check') + '"></i></button>' +
                //     '</div></td>';

                // Debug the is_active value
                //console.log('Setting ID:', setting.id, 'is_active value:', setting.is_active, 'type:', typeof setting.is_active);
                                
                // Debug the is_active value with JSON stringification to see exact value
                console.log('Setting ID:', setting.id, 'is_active value:', JSON.stringify(setting.is_active), 'type:', typeof setting.is_active);
                
                // Directly check the value and convert to string for comparison if needed
                let statusClass = 'status-rejected';
                let statusText = 'Inactive';
                
                // Convert to string for comparison to handle all possible formats
                const isActiveStr = String(setting.is_active).toLowerCase();
                
                if (isActiveStr === 'true' || isActiveStr === '1') {
                    statusClass = 'status-approved';
                    statusText = 'Active';
                } else if (isActiveStr === '2') {
                    statusClass = 'status-pending';
                    statusText = 'Closed';
                }
                
                row.innerHTML = 
                    '<td> RD' + setting.id + '</td>' +
                    '<td>' + parseFloat(setting.annual_rate).toFixed(2) + '%</td>' +
                    '<td>' + setting.payment_interval + '</td>' +
                    '<td>₹ ' + setting.amount + '</td>' +
                    '<td>₹ ' + setting.penality_rate + '</td>' +
                    '<td>' + (setting.duration/12) + ' ' + ((setting.duration/12 === 1 || setting.duration/12 === 0.5) ? 'Year' : 'Years') + '</td>' +
                    '<td><span class="status-badge ' + statusClass + '">' + statusText + '</span></td>' +
                    '<td><div class="button-group">' +
                    '<button class="btn btn-sm btn-warning" onclick="editRDSetting(' + setting.id + ', ' + setting.annual_rate + ','+ setting.penality_rate + ', \'' + setting.payment_interval + '\', ' + setting.amount + ', ' + setting.duration + ', \'' + setting.is_active + '\')">' +
                    '<i class="bx bx-edit"></i></button>' +
                    '</div></td>';
                
                tableBody.appendChild(row);
            });
        } else {
            const row = document.createElement('tr');
            row.innerHTML = '<td colspan="8" class="text-center">No RD settings found</td>';
            tableBody.appendChild(row);
        }
    }
    
    // Submit RD Settings Form
    function submitRDSettingsForm() {
        const form = document.getElementById('rdSettingsForm');
        
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        // Set a flag to indicate we're submitting RD settings
        
        const user_id = document.getElementById('rd_user_id').value;
        const annual_rate = document.getElementById('annual_rate').value;
        const payment_interval = document.getElementById('payment_interval').value;
        const amount = document.getElementById('rd_amount').value;
        const duration = document.getElementById('duration').value;
        const penality_rate = document.getElementById('penality_rate').value;
        //console.log(user_id, annual_rate, payment_interval, amount, duration, penality_rate);
        // Show loading state
        const saveButton = document.querySelector('#rdSettingsModal .modal-footer .btn-primary');
        const originalText = saveButton.textContent;
        saveButton.textContent = 'Saving...';
        saveButton.disabled = true;
        
        fetch('/recurring-deposits/rd-settings', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: user_id,
                annual_rate: annual_rate,
                payment_interval: payment_interval,
                amount: amount,
                duration: duration,
                penality_rate: penality_rate
            })
        })
        .then(function(response) { return response.json(); })
        .then(function(data) {
            if (data.success) {
                // Reset form
                form.reset();
                
                // Show success message
                alert('RD Setting added successfully!');
                
                // Reload settings
                loadRDSettings();
            } else {
                // Show error message
                alert('Error1: ' + data.message);              
            }
            // Reset button state
            saveButton.textContent = originalText;
            saveButton.disabled = false;
        })
        .catch(function(error) {
            console.error('Error2:', error);
            alert('An error occurred while adding the RD setting.');
            
            // Reset button state
            saveButton.textContent = originalText;
            saveButton.disabled = false;
        });
    }
    
    // Edit RD Setting
    function editRDSetting(id, annual_rate, penality_rate, payment_interval, amount, duration, is_active) {
        // Set form values
        document.getElementById('annual_rate').value = annual_rate;
        document.getElementById('penality_rate').value = penality_rate;
        document.getElementById('payment_interval').value = payment_interval;
        document.getElementById('rd_amount').value = amount;
        document.getElementById('duration').value = duration;
        
        // Change button to update
        const saveButton = document.querySelector('#rdSettingsModal .modal-footer .btn-primary');
        saveButton.textContent = 'Update Setting';
        saveButton.disabled = false; // Always enable the button for editing
        
        // Store the original onclick function
        const originalOnClick = saveButton.onclick;
        
        // Set new onclick function
        saveButton.onclick = function() {
            updateRDSetting(id);
            
            // After updating, restore the original onclick function
            setTimeout(function() {
                saveButton.onclick = originalOnClick;
            }, 100);
        };
    }
    
    // Update RD Setting
    function updateRDSetting(id) {
        const form = document.getElementById('rdSettingsForm');
        
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        const user_id = document.getElementById('rd_user_id').value;
        const annual_rate = document.getElementById('annual_rate').value;
        const penality_rate = document.getElementById('penality_rate').value;
        const payment_interval = document.getElementById('payment_interval').value;
        const amount = document.getElementById('rd_amount').value;
        const duration = document.getElementById('duration').value;
        
        fetch('/recurring-deposits/rd-settings/' + id, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: user_id,
                annual_rate: annual_rate,
                penality_rate: penality_rate,
                payment_interval: payment_interval,
                amount: amount,
                duration: duration
            })
        })
        .then(function(response) { return response.json(); })
        .then(function(data) {
            if (data.success) {
                // Reset form
                form.reset();
                
                // Reset button
                const saveButton = document.querySelector('#rdSettingsModal .modal-footer .btn-primary');
                saveButton.textContent = 'Save Settings';
                saveButton.onclick = submitRDSettingsForm;
                
                // Show success message
                alert('RD Setting updated successfully!');
                
                // Reload settings
                loadRDSettings();
            } else {
                alert('Error: ' + data.message);
            }
        })
        .catch(function(error) {
            console.error('Error:', error);
            alert('An error occurred while updating the RD setting.');
        });
    }
    
    // Toggle RD Setting Status (Active/Inactive)
    function toggleRDSettingStatus(id, makeActive) {
        if (!confirm('Are you sure you want to ' + (makeActive ? 'activate' : 'deactivate') + ' this RD setting?')) {
            return;
        }
        
        // If we're deactivating the only active setting, warn the user
        if (!makeActive && hasActiveRDSettings) {
            if (!confirm('Warning: Deactivating this setting will prevent any deposit actions until a new setting is activated. Continue?')) {
                return;
            }
        }
        
        // Show loading state on the button
        const button = event.target.closest('button');
        const originalHTML = button.innerHTML;
        button.innerHTML = '<i class="bx bx-loader bx-spin"></i>';
        button.disabled = true;
        
        fetch('/recurring-deposits/rd-settings/' + id, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                is_active: makeActive
            })
        })
        .then(function(response) { return response.json(); })
        .then(function(data) {
            if (data.success) {
                // Show success message
                alert('RD Setting ' + (makeActive ? 'activated' : 'deactivated') + ' successfully!');
                
                // Reload settings
                loadRDSettings();
            } else {
                // Show error message
                alert('Error: ' + data.message);
                
                // Reset button state
                button.innerHTML = originalHTML;
                button.disabled = false;
            }
        })
        .catch(function(error) {
            console.error('Error:', error);
            alert('An error occurred while updating the RD setting status.');
            
            // Reset button state
            button.innerHTML = originalHTML;
            button.disabled = false;
        });
    }
    
    // Function to handle settlement process
    function settlementDeposits() {
        // Get the selected setting ID
        let settingId = document.getElementById('selected_setting_id').value;
        
        // If no setting ID is selected, get it from the dropdown
        if (!settingId) {
            const dropdown = document.getElementById('rdSettingDropdown');
            if (dropdown && dropdown.value) {
                settingId = dropdown.value;
                // Update the hidden field
                document.getElementById('selected_setting_id').value = settingId;
            } else {
                alert('Please select an RD setting first');
                return;
            }
        }
        
        // Set the setting ID in the settlement form
        document.getElementById('settlement_setting_id').value = settingId;
        
        // Set default settlement date to today
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('settlement_date').value = today;
        
        // Get the setting details to display in the modal
        fetch(`/recurring-deposits/rd-settings?user_id=<%= member.id %>&setting_id=${settingId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.settings) {
                    const setting = data.settings;
                    // Format currency for display without the currency symbol
                    const formatAmount = (amount) => {
                        return parseFloat(amount || 0).toFixed(2);
                    };
                    
                    // Update the settlement modal with setting details
                    document.getElementById('settlement_principal').value = formatAmount(setting.total_principal);
                    document.getElementById('settlement_interest').value = formatAmount(setting.total_interest);
                    document.getElementById('settlement_penalty').value = formatAmount(setting.total_penality);
                    document.getElementById('settlement_net').value = formatAmount(setting.total_net_amount);
                    
                    // Add event listeners to update the net amount when interest value changes
                    const principalInput = document.getElementById('settlement_principal');
                    const interestInput = document.getElementById('settlement_interest');
                    const netInput = document.getElementById('settlement_net');
                    
                    // Store the original net amount from the setting
                    const originalNetAmount = parseFloat(setting.total_net_amount || 0);
                    
                    // Display the original net amount
                    document.getElementById('settlement_net').value = formatAmount(originalNetAmount);
                    
                    // Function to update net amount when interest changes
                    const updateNetAmount = () => {
                        // Get the original principal and penalty
                        const principal = parseFloat(principalInput.value) || 0;
                        const interest = parseFloat(interestInput.value) || 0;
                        
                        // Calculate net amount: Principal + Interest
                        const netAmount = principal + interest;
                        netInput.value = netAmount.toFixed(2);
                        
                        
                    };
                    
                    // Only add event listener to the editable field (interest)
                    interestInput.addEventListener('input', updateNetAmount);
                    
                    // Initial calculation
                    updateNetAmount();
                    
                    // Show the settlement modal
                    const settlementModal = new bootstrap.Modal(document.getElementById('settlementModal'));
                    settlementModal.show();
                } else {
                    alert('Error loading RD setting details');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error loading RD setting details');
            });
    }
    
    // Function to confirm settlement
    function confirmSettlement() {
        // Get form data
        const settingId = document.getElementById('settlement_setting_id').value;
        const userId = document.getElementById('settlement_user_id').value;
        const settlementDate = document.getElementById('settlement_date').value;
        const principal = document.getElementById('settlement_principal').value;
        const interest = document.getElementById('settlement_interest').value;
        const penalty = document.getElementById('settlement_penalty').value;
        const netAmount = document.getElementById('settlement_net').value;
        const notes = document.getElementById('settlement_notes').value;
        
        // Validate form
        if (!settlementDate) {
            alert('Please select a settlement date');
            return;
        }
        
        if (!netAmount || parseFloat(netAmount) < 0) {
            alert('Net amount must be a valid number');
            return;
        }
        
        // Confirm with user
        if (!confirm('Are you sure you want to settle this RD account with a net amount of ₹' + netAmount + '? This action cannot be undone.')) {
            return;
        }
        
        // Disable the confirm button to prevent multiple submissions
        const confirmBtn = document.getElementById('confirmSettlementBtn');
        const originalBtnText = confirmBtn.textContent;
        confirmBtn.disabled = true;
        confirmBtn.textContent = 'Processing...';
        
        // Send settlement request to server
        fetch(`/recurring-deposits/rd-settlement/${userId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                setting_id: settingId,
                settlement_date: settlementDate,
                total_principal: principal,
                total_interest: interest,
                total_penality: penalty,
                net_amount: netAmount,
                notes: notes
            })
        })
        .then(response => response.json())
        .then(data => {
            // Re-enable the button
            confirmBtn.disabled = false;
            confirmBtn.textContent = originalBtnText;
            
            if (data.success) {
                // Close the modal
                const settlementModal = bootstrap.Modal.getInstance(document.getElementById('settlementModal'));
                settlementModal.hide();
                
                // Show success message
                alert('RD account settled successfully!');
                
                // Reload the page to reflect changes
                window.location.reload();
            } else {
                alert('Error: ' + (data.message || 'Failed to settle RD account'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error processing settlement');
            
            // Re-enable the button
            confirmBtn.disabled = false;
            confirmBtn.textContent = originalBtnText;
        });
    }
</script>

<!-- Settlement Modal -->
<div class="modal fade" id="settlementModal" tabindex="-1" aria-labelledby="settlementModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="settlementModalLabel">RD Settlement</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <p><strong>Note:</strong> Settling this RD account will mark it as closed and finalize all calculations.</p>
                </div>
                
                
                <form id="settlementForm">
                    <input type="hidden" id="settlement_setting_id" name="setting_id">
                    <input type="hidden" id="settlement_user_id" name="user_id" value="<%= member.id %>">
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="settlement_principal" class="form-label">Total Principal</label>
                                <input type="text" class="form-control" id="settlement_principal" name="principal" readonly disabled="disabled">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="settlement_penalty" class="form-label">Total Penalty</label>
                                <input type="text" class="form-control" id="settlement_penalty" name="penalty" readonly disabled="disabled">
                            </div>
                        </div>
                        
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="settlement_interest" class="form-label">Total Interest</label>
                                <input type="text" class="form-control" id="settlement_interest" name="interest">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="settlement_net" class="form-label">Total Net</label>
                                <input type="text" class="form-control" id="settlement_net" name="net_amount" readonly disabled="disabled">
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="settlement_date" class="form-label">Settlement Date</label>
                        <input type="date" class="form-control" id="settlement_date" name="settlement_date" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="settlement_notes" class="form-label">Notes</label>
                        <textarea class="form-control" id="settlement_notes" name="notes" rows="2"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmSettlementBtn" onclick="confirmSettlement()">Confirm Settlement</button>
            </div>
        </div>
    </div>
</div>
