<%- contentFor('style') %>
<style>
    /* Overlay Loader Styles */
    .overlay-loader {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        z-index: 9999;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }
    
    .spinner {
        width: 60px;
        height: 60px;
        border: 6px solid #f3f3f3;
        border-top: 6px solid #3498db;
        border-radius: 50%;
        animation: spin 2s linear infinite;
    }
    
    .loader-text {
        color: white;
        margin-top: 20px;
        font-size: 18px;
        font-weight: 500;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    .main-content {
       padding: 20px;
    }
    .welcome-section {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
        margin-bottom: 0;
    }
    .section-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
        padding: 20px;
    }
    .section-title {
        border-bottom: 2px solid #f0f0f0;
        padding-bottom: 10px;
        margin-bottom: 20px;
        color: #333;
    }
    .info-row {
        margin-bottom: 15px;
    }
    .info-label {
        font-weight: 700;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        color: #343a40;
        font-size: 0.95rem;
    }
    .info-value {
        font-weight: 500;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        color: #212529;
        text-align: left;
        padding-left: 0;
    }
    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.875rem;
        font-weight: 500;
    }
    .status-pending {
        background-color: #ffc107;
        color: #212529;
    }
    .status-approved {
        background-color: #28a745;
        color: #fff;
    }
    .status-rejected {
        background-color: #dc3545;
        color: #fff;
    }
    #viewDepositModal .modal-body {
        padding: 1.5rem;
    }
    #viewDepositModal .row {
        margin-bottom: 0.75rem;
    }
    #viewDepositModal .modal-content {
        border-radius: 0.5rem;
    }
    .button-group {
        display: flex;
        flex-direction: row;
        white-space: nowrap;
    }
    .button-group .btn:not(:last-child) {
        margin-right: 1px;
    }
</style>

<%- contentFor('body') %>
<!-- Overlay Loader -->
<div class="overlay-loader" id="overlayLoader">
    <div class="spinner"></div>
    <div class="loader-text">Calculating deposits... Please wait</div>
</div>

<div class="main-content">
    <div class="welcome-section">
        <div class="d-flex justify-content-between align-items-center">
            <h2 class="mb-0">Recurring Deposit - <%= member.profile ? member.profile.name : member.user_id %></h2>
            <div>
                <a href="/members/view/<%= member.id %>" class="btn btn-secondary">
                    <i class="bx bx-arrow-back"></i> Back to Member
                </a>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addDepositModal">
                    <i class="bx bx-plus"></i> Add New Deposit
                </button>
                <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#rdSettingsModal">
                    <i class="bx bx-cog"></i> RD Settings
                </button>
                <button type="button" class="btn btn-success" id="calculateButton" onclick="calculateDeposits()">
                    <i class="bx bx-calculator"></i> Calculate
                </button>
            </div>
        </div>
    </div>

    <!-- Member Basic Info -->
    <div class="section-card">
        <h4 class="section-title">Member Information</h4>
        <div class="row">
            <div class="col-md-3">
                <div class="info-row">
                    <div class="info-label">Account Number</div>
                    <div class="info-value"><%= member.account_number %></div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="info-row">
                    <div class="info-label">User ID</div>
                    <div class="info-value"><%= member.user_id %></div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="info-row">
                    <div class="info-label">Name</div>
                    <div class="info-value"><%= member.name ? member.name : 'N/A' %></div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="info-row">
                    <div class="info-label">Mobile</div>
                    <div class="info-value"><%= member.mobile_number ? member.mobile_number : 'N/A' %></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Deposit History -->
    <div class="section-card">
        <h4 class="section-title">Deposit History</h4>
        <% if (deposits && deposits.length > 0) { %>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>S.No.</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Payment Method</th>
                            <th>Transaction ID</th>                            
                            <th>Per Day Rate</th>
                            <th>Payment Interval</th>
                            <th>Interest Amount</th>
                            <th>Penality Paid Amount</th>
                            <th>Total Amount</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% deposits.forEach((deposit, index) => { %>
                            <tr>
                                <td><%= index + 1 %></td>
                                <td><%= new Date(deposit.deposit_date).toLocaleDateString() %></td>
                                <td>₹ <%= deposit.amount.toFixed(2) %></td>
                                <td><%= deposit.payment_method || 'N/A' %></td>
                                <td><%= deposit.transaction_id || 'N/A' %></td>
                                <td><%= deposit.per_day_rate || 'N/A' %></td>
                                <td><%= deposit.payment_interval || 'N/A' %></td>
                                <td><%= deposit.interest_amount || 'N/A' %></td>
                                <td><%= deposit.penality_paid_amount || 'N/A' %></td>
                                <td><%= deposit.total_amount || 'N/A' %></td>
                                <td>
                                    <span class="status-badge status-<%= deposit.status.toLowerCase() %>">
                                        <%= deposit.status %>
                                    </span>
                                </td>
                                <td>
                                    <div class="button-group">
                                        <button class="btn btn-sm btn-warning" 
                                            onclick="openEditDepositModal('<%= deposit.id %>', '<%= deposit.amount %>', '<%= deposit.payment_method %>', '<%= deposit.transaction_id %>', '<%= deposit.comments %>', '<%= deposit.status %>')">
                                            <i class="bx bx-edit"></i> Edit
                                        </button>
                                        <button class="btn btn-sm btn-info" 
                                            onclick="viewDepositDetails('<%= deposit.id %>')">
                                            <i class="bx bx-show"></i> View
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        <% } else { %>
            <div class="alert alert-info">
                No deposit records found for this member.
            </div>
        <% } %>
    </div>
</div>

<!-- Add Deposit Modal -->
<div class="modal fade" id="addDepositModal" tabindex="-1" aria-labelledby="addDepositModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addDepositModalLabel">Add New Deposit</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addDepositForm">
                    <!-- First row: Annual Rate and Required Amount -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="deposit_per_day_rate" class="form-label">Per Day Rate (%)</label>
                            <input type="number" class="form-control" id="deposit_per_day_rate" name="per_day_rate" required min="0.01" step="0.01" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="required_amount" class="form-label">Required Amount (₹)</label>
                            <input type="number" class="form-control" id="required_amount" name="required_amount" required min="1" step="0.01" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="deposit_payment_interval" class="form-label">Payment Interval</label>
                            <input type="text" class="form-control" id="deposit_payment_interval" name="payment_interval" required readonly disabled>
                        </div>

                    </div>
                    
                    <!-- Second row: Payment Interval and Paid Amount -->
                    <div class="row mb-3">                        
                        <div class="col-md-4">
                            <label for="penality_amount" class="form-label">Required Penality (₹)</label>
                            <input type="number" class="form-control" id="penality_amount" name="penality_amount" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="penality_paid_amount" class="form-label">Paid Penality (₹)</label>
                            <input type="number" class="form-control" id="penality_paid_amount" name="penality_paid_amount">
                        </div>
                        <div class="col-md-4">
                            <label for="amount" class="form-label">Total Paid Amount (₹)</label>
                            <input type="number" class="form-control" id="amount" name="amount" required min="1" step="0.01">
                        </div>
                    </div>


                    
                    <!-- Third row: Payment Method and Transaction ID -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="payment_method" class="form-label">Payment Method</label>
                            <select class="form-select" id="payment_method" name="payment_method" required>
                                <option value="">Select Payment Method</option>
                                <option value="Cash">Cash</option>
                                <option value="Bank Transfer">Bank Transfer</option>
                                <option value="UPI">UPI</option>
                                <option value="Cheque">Cheque</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="transaction_id" class="form-label">Transaction ID</label>
                            <input type="text" class="form-control" id="transaction_id" name="transaction_id">
                        </div>
                        <div class="col-md-4">
                            <label for="deposit_status" class="form-label">Status</label>
                            <select class="form-select" id="deposit_status" name="status" required>
                                <option value="Approved" selected>Approved</option>
                                <option value="Pending">Pending</option>
                                <option value="Rejected">Rejected</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Fourth row: Notes -->
                    <div class="mb-3">
                        <label for="notes" class="form-label">Notes</label>
                        <textarea class="form-control" id="notes" name="notes" rows="2"></textarea>
                    </div>                   
                    
                </form>
            </div>
            <div class="modal-footer">
                <input type="hidden" id="deposit_setting_id" name="deposit_setting_id">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitAddDepositForm()">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Deposit Modal -->
<div class="modal fade" id="editDepositModal" tabindex="-1" aria-labelledby="editDepositModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editDepositModalLabel">Edit Deposit</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editDepositForm">
                    <input type="hidden" id="edit_deposit_id" name="deposit_id">
                    <input type="hidden" id="edit_setting_id" name="setting_id">
                    
                    <!-- First row: Annual Rate and Required Amount -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="edit_per_day_rate" class="form-label">Per Day Rate (%)</label>
                            <input type="number" class="form-control" id="edit_per_day_rate" name="annual_rate" required min="0.01" step="0.01" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="edit_required_amount" class="form-label">Required Amount (₹)</label>
                            <input type="number" class="form-control" id="edit_required_amount" name="required_amount" required min="1" step="0.01" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="edit_payment_interval" class="form-label">Payment Interval</label>
                            <select class="form-select" id="edit_payment_interval" name="payment_interval" required readonly disabled>
                                <option value="Daily">Daily</option>
                                <option value="Monthly">Monthly</option>
                                <option value="Yearly">Yearly</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Second row: Paid Amount, Penalty Amount and Penalty Paid Amount -->
                    <div class="row mb-3">                        
                        <div class="col-md-4">
                            <label for="edit_penalty_amount" class="form-label">Required Penality (₹)</label>
                            <input type="number" class="form-control" id="edit_penalty_amount" name="penality_amount" step="0.01" readonly disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="edit_penalty_paid_amount" class="form-label">Paid Penality (₹)</label>
                            <input type="number" class="form-control" id="edit_penalty_paid_amount" name="penality_paid_amount" min="0" step="0.01">
                        </div>
                        <div class="col-md-4">
                            <label for="edit_amount" class="form-label">Total Paid Amount (₹)</label>
                            <input type="number" class="form-control" id="edit_amount" name="amount" required min="1" step="0.01">
                        </div>
                    </div>
                    
                    <!-- Third row: Payment Method and Transaction ID -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="edit_payment_method" class="form-label">Payment Method</label>
                            <select class="form-select" id="edit_payment_method" name="payment_method" required>
                                <option value="">Select Payment Method</option>
                                <option value="Cash">Cash</option>
                                <option value="Bank Transfer">Bank Transfer</option>
                                <option value="UPI">UPI</option>
                                <option value="Cheque">Cheque</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="edit_transaction_id" class="form-label">Transaction ID</label>
                            <input type="text" class="form-control" id="edit_transaction_id" name="transaction_id">
                        </div>
                        <div class="col-md-4">
                            <label for="edit_status" class="form-label">Status</label>
                            <select class="form-select" id="edit_status" name="status" required>
                                <option value="Approved">Approved</option>
                                <option value="Pending">Pending</option>
                                <option value="Rejected">Rejected</option>
                            </select>    
                        </div>                            
                    </div>
                    
                    <!-- Fifth row: Notes -->
                    <div class="mb-3">
                        <label for="edit_comments" class="form-label">Notes</label>
                        <textarea class="form-control" id="edit_comments" name="comments" rows="2"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitEditDepositForm()">Update</button>
            </div>
        </div>
    </div>
</div>

<!-- View Deposit Details Modal -->
<div class="modal fade" id="viewDepositModal" tabindex="-1" aria-labelledby="viewDepositModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewDepositModalLabel">Deposit Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Date:</div>
                            <div class="col-6 info-value" id="view_date"></div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Per Day Rate:</div>
                            <div class="col-6 info-value" id="view_per_day_rate"></div>
                        </div>
                    </div>                    
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Required Amount:</div>
                            <div class="col-6 info-value" id="view_required_amount"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Payment Interval:</div>
                            <div class="col-6 info-value" id="view_payment_interval"></div>
                        </div>
                    </div>                    
                </div>


                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Total Days:</div>
                            <div class="col-6 info-value" id="view_total_days"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Total Interest:</div>
                            <div class="col-6 info-value" id="view_interest_amount"></div>
                        </div>
                    </div>
                </div>


                <!-- Penalty Amount and Penalty Paid Amount in one row -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Penalty Amount:</div>
                            <div class="col-6 info-value" id="view_penalty_amount"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Penalty Paid:</div>
                            <div class="col-6 info-value" id="view_penalty_paid_amount"></div>
                        </div>
                    </div>
                </div>
                
                <!-- Payment Method and Transaction ID in one row -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Paid Amount:</div>
                            <div class="col-6 info-value" id="view_amount"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Total Amount:</div>
                            <div class="col-6 info-value" id="view_total_amount"></div>
                        </div>
                    </div>                    
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Payment Method:</div>
                            <div class="col-6 info-value" id="view_payment_method"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Transaction ID:</div>
                            <div class="col-6 info-value" id="view_transaction_id"></div>
                        </div>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-4 info-label">Notes:</div>
                    <div class="col-8 info-value" id="view_notes"></div>
                </div>              
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Interest Added:</div>
                            <div class="col-6 info-value" id="view_interest_added"></div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-6 info-label">Status:</div>
                            <div class="col-6 info-value">
                                <span class="status-badge" id="view_status_badge"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- RD Settings Modal -->
<div class="modal fade" id="rdSettingsModal" tabindex="-1" aria-labelledby="rdSettingsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rdSettingsModalLabel">Recurring Deposit Settings</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="rdSettingsForm">
                    <input type="hidden" id="rd_user_id" name="user_id" value="<%= member.id %>">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="rd_amount" class="form-label">Amount (₹)</label>
                            <input type="number" class="form-control" id="rd_amount" name="amount" required min="1" step="1" placeholder="Enter amount" value="0">
                        </div>
                        <div class="col-md-6">
                            <label for="annual_rate" class="form-label">Annual Rate (%)</label>
                            <input type="number" class="form-control" id="annual_rate" name="annual_rate" required min="0.01" step="0.01" placeholder="Enter annual interest rate">
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="penality_rate" class="form-label">Penality Rate (per day) (₹)</label>
                            <input type="number" class="form-control" id="penality_rate" name="penality_rate" required min="0.01" step="0.01" placeholder="Enter penality rate" value="1">
                        </div>                    
                        <div class="col-md-6">
                            <label for="duration" class="form-label">Duration</label>
                            <select class="form-select" id="duration" name="duration" required>
                                <option value="">Select Duration</option>
                                <option value="6">Half Year</option>
                                <option value="12">1 Year</option>
                                <option value="24">2 Years</option>
                                <option value="36">3 Years</option>
                                <option value="48">4 Years</option>
                                <option value="60">5 Years</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="payment_interval" class="form-label">Payment Interval</label>
                            <select class="form-select" id="payment_interval" name="payment_interval" required>
                                <option value="">Select Payment Interval</option>
                                <option value="Daily">Daily</option>
                                <option value="Monthly">Monthly</option>
                                <option value="Yearly">Yearly</option>
                            </select>
                        </div>
                    </div>
                    
                </form>

                <div class="mt-4">
                    <h6>Current RD Settings</h6>
                    <div id="rdSettingsList" class="table-responsive">
                        <table class="table table-sm table-hover">
                            <thead>
                                <tr>
                                    <th>Annual Rate</th>
                                    <th>Payment Interval</th>
                                    <th>Amount</th>
                                    <th>Penality Rate</th>
                                    <th>Duration</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="rdSettingsTableBody">
                                <!-- Settings will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="submitRDSettingsForm()">Save Settings</button>
            </div>
        </div>
    </div>
</div>

<%- contentFor('script') %>
<script>
    // Global variable to track if there are active RD settings
    let hasActiveRDSettings = false;
    
    // Check for RD Settings on page load
    document.addEventListener('DOMContentLoaded', function() {
        checkRDSettings();
    });
    
    // Function to check if RD settings exist and open modal if not
    function checkRDSettings() {
        const userId = document.getElementById('rd_user_id').value;
        fetch('/members/rd-settings?user_id=' + userId)
            .then(function(response) { return response.json(); })
            .then(function(data) {
                if (data.success) {
                    const settings = data.settings;
                    hasActiveRDSettings = settings && settings.some(function(setting) { return setting.is_active; });
                    
                    if (!hasActiveRDSettings) {
                        // No active RD settings found, open the settings modal
                        const rdSettingsModal = new bootstrap.Modal(document.getElementById('rdSettingsModal'));
                        rdSettingsModal.show();
                        
                        // Show warning message
                        const warningDiv = document.createElement('div');
                        warningDiv.className = 'alert alert-warning mb-3';
                        warningDiv.id = 'rdSettingsWarning';
                        warningDiv.innerHTML = '<strong>Important:</strong> You must set up Recurring Deposit settings before proceeding with any actions.';
                        document.querySelector('.welcome-section').appendChild(warningDiv);
                        
                        // Disable all action buttons
                        disableAllActions();
                    }
                } else {
                    console.error('Error checking RD settings:', data.message);
                }
            })
            .catch(function(error) {
                console.error('Error:', error);
            });
    }
    
    // Function to disable all action buttons
    function disableAllActions() {
        // Disable the Add Deposit button
        const addDepositBtn = document.querySelector('button[data-bs-target="#addDepositModal"]');
        if (addDepositBtn) {
            addDepositBtn.disabled = true;
            addDepositBtn.title = 'Please set up RD settings first';
        }
        
        // Disable other action buttons if any
        const actionButtons = document.querySelectorAll('.action-btn');
        actionButtons.forEach(function(btn) {
            btn.disabled = true;
            btn.title = 'Please set up RD settings first';
        });
    }
    
    // Function to enable all action buttons
    function enableAllActions() {
        // Enable the Add Deposit button
        const addDepositBtn = document.querySelector('button[data-bs-target="#addDepositModal"]');
        if (addDepositBtn) {
            addDepositBtn.disabled = false;
            addDepositBtn.title = '';
        }
        
        // Enable other action buttons if any
        const actionButtons = document.querySelectorAll('.action-btn');
        actionButtons.forEach(function(btn) {
            btn.disabled = false;
            btn.title = '';
        });
        
        // Remove warning message if exists
        const warningDiv = document.getElementById('rdSettingsWarning');
        if (warningDiv) {
            warningDiv.remove();
        }
    }
    
    // Load RD Settings when Add Deposit Modal is opened
    document.getElementById('addDepositModal').addEventListener('show.bs.modal', function () {
        loadActiveRDSettingForDeposit();
    });
    
    // Function to load active RD Setting for deposit
    function loadActiveRDSettingForDeposit() {
        const userId = '<%= member.id %>';
        fetch('/members/rd-settings?user_id=' + userId)
            .then(function(response) { return response.json(); })
            .then(function(data) {
                if (data.success) {
                    // Find active setting
                    const activeSetting = data.settings.find(setting => setting.is_active);
                    
                    if (activeSetting) {
                        // Set the values in the form
                        document.getElementById('deposit_per_day_rate').value = parseFloat(activeSetting.annual_rate/365).toFixed(2);
                        document.getElementById('required_amount').value = activeSetting.amount;
                        document.getElementById('deposit_payment_interval').value = activeSetting.payment_interval;
                        document.getElementById('amount').value = activeSetting.amount;
                        document.getElementById('deposit_setting_id').value = activeSetting.id;
                        
                        // Calculate penalty amount based on grace period and days from start of month
                        calculatePenaltyAmount(activeSetting.penality_rate);
                    } else {
                        alert('No active RD Setting found. Please create an active RD Setting first.');
                        // Close the modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('addDepositModal'));
                        modal.hide();
                        
                        // Open the RD Settings modal
                        const rdSettingsModal = new bootstrap.Modal(document.getElementById('rdSettingsModal'));
                        rdSettingsModal.show();
                    }
                } else {
                    console.error('Error loading RD settings:', data.message);
                    alert('Error loading RD settings: ' + data.message);
                }
            })
            .catch(function(error) {
                console.error('Error:', error);
                alert('An error occurred while loading RD settings.');
            });
    }
    
    // Function to calculate penalty amount based on grace period and days from start of month
    function calculatePenaltyAmount(penalityRate) {
        // Get the current date
        const currentDate = new Date();
        
        // Get the first day of the current month
        const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
        
        // Calculate days elapsed from start of month to current date
        const daysElapsed = Math.floor((currentDate - firstDayOfMonth) / (24 * 60 * 60 * 1000));
        
        // Get the grace period from environment variable (defined server-side)
        const gracePeriod = parseInt('<%= process.env.RD_PENALTY_GRACE_PERIOD || 15 %>');
        // Initialize penalty amount
        let penaltyAmount = 0;
        // Check if current date is beyond grace period
        if (daysElapsed > gracePeriod) {
            penaltyAmount = daysElapsed * parseFloat(penalityRate);
        }        
        // Set the penalty amount in the form
        document.getElementById('penality_amount').value = penaltyAmount.toFixed(2);
        
        // Initialize penalty paid amount to the same value (user can adjust if needed)
        document.getElementById('penality_paid_amount').value = penaltyAmount.toFixed(2);
        
        // Update the total paid amount to include the penalty paid amount
        updateTotalPaidAmount();
        
        return penaltyAmount;
    }
    
    // Function to update the total paid amount when penalty paid amount changes
    function updateTotalPaidAmount() {
        // Get the required amount (regular payment amount)
        const requiredAmount = parseFloat(document.getElementById('required_amount').value) || 0;
        
        // Get the penalty paid amount
        const penalityPaidAmount = parseFloat(document.getElementById('penality_paid_amount').value) || 0;
        
        // Calculate the total paid amount (required amount + penalty paid amount)
        const totalPaidAmount = requiredAmount + penalityPaidAmount;
        
        // Update the paid amount field
        document.getElementById('amount').value = totalPaidAmount.toFixed(2);
    }
    
    // Add event listeners to penalty paid amount fields to update the total paid amount when they change
    document.addEventListener('DOMContentLoaded', function() {
        // For Add Deposit form
        const penalityPaidAmountInput = document.getElementById('penality_paid_amount');
        if (penalityPaidAmountInput) {
            penalityPaidAmountInput.addEventListener('input', updateTotalPaidAmount);
        }
        
        // For Edit Deposit form
        const editPenalityPaidAmountInput = document.getElementById('edit_penalty_paid_amount');
        if (editPenalityPaidAmountInput) {
            editPenalityPaidAmountInput.addEventListener('input', updateEditTotalPaidAmount);
        }
    });
    
    // Function to update the total paid amount in the Edit form when penalty paid amount changes
    function updateEditTotalPaidAmount() {
        // Get the required amount (regular payment amount)
        const requiredAmount = parseFloat(document.getElementById('edit_required_amount').value) || 0;
        
        // Get the penalty paid amount
        const penalityPaidAmount = parseFloat(document.getElementById('edit_penalty_paid_amount').value) || 0;
        
        // Calculate the total paid amount (required amount + penalty paid amount)
        const totalPaidAmount = requiredAmount + penalityPaidAmount;
        
        // Update the paid amount field
        document.getElementById('edit_amount').value = totalPaidAmount.toFixed(2);
    }
    
    // Function to submit the Add Deposit form
    function submitAddDepositForm() {
        const form = document.getElementById('addDepositForm');
        
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        // Show loading state on the button
        const saveButton = document.querySelector('#addDepositModal .modal-footer .btn-primary');
        const originalText = saveButton.textContent;
        saveButton.textContent = 'Saving...';
        saveButton.disabled = true;
        
        
        // Get form values
        const per_day_rate = document.getElementById('deposit_per_day_rate').value;
        const required_amount = document.getElementById('required_amount').value;
        const payment_interval = document.getElementById('deposit_payment_interval').value;
        const amount = document.getElementById('amount').value;
        const payment_method = document.getElementById('payment_method').value;
        const transaction_id = document.getElementById('transaction_id').value;
        const notes = document.getElementById('notes').value;
        const status = document.getElementById('deposit_status').value;
        const setting_id = document.getElementById('deposit_setting_id').value;
        const penality_amount = document.getElementById('penality_amount').value;
        const penality_paid_amount = document.getElementById('penality_paid_amount').value;
        
        // Send request to the server
        fetch('/members/recurring-deposit/<%= member.id %>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                per_day_rate,
                required_amount,
                payment_interval,
                amount,
                payment_method,
                transaction_id,
                comments: notes,
                status,
                setting_id,
                penality_amount,
                penality_paid_amount
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Reset form
                form.reset();
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addDepositModal'));
                modal.hide();
                
                // Show success message
                alert('Deposit added successfully!');
                
                // Reload page to show new deposit
                window.location.reload();
            } else {
                alert('Error: ' + data.message);
                
                // Reset button state
                saveButton.textContent = originalText;
                saveButton.disabled = false;
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while adding the deposit.');
            
            // Reset button state
            saveButton.textContent = originalText;
            saveButton.disabled = false;
        });
    }
    
    // Function to handle deposit calculation
    function calculateDeposits() {
        // Show the overlay loader
        const loader = document.getElementById('overlayLoader');
        loader.style.display = 'flex';
        
        // Disable all buttons and inputs to prevent user interaction
        const buttons = document.querySelectorAll('button');
        const inputs = document.querySelectorAll('input, select, textarea');
        
        buttons.forEach(button => button.disabled = true);
        inputs.forEach(input => input.disabled = true);
        
        // Get the user ID
        const userId = '<%= member.id %>';
        
        // Send request to the server
        fetch(`/members/calculate-deposits/${userId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            // Hide the loader
            loader.style.display = 'none';
            
            // Re-enable all buttons and inputs
            buttons.forEach(button => button.disabled = false);
            inputs.forEach(input => input.disabled = false);
            
            if (data.success) {
                // Show success message
                alert('Calculation completed successfully!');
                
                // Reload the page to show updated data
                window.location.reload();
            } else {
                // Show error message
                alert('Error: ' + (data.message || 'An error occurred during calculation.'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            
            // Hide the loader
            loader.style.display = 'none';
            
            // Re-enable all buttons and inputs
            buttons.forEach(button => button.disabled = false);
            inputs.forEach(input => input.disabled = false);
            
            // Show error message
            alert('An error occurred during calculation. Please try again.');
        });
    }
       

    
    // Edit Deposit Modal
    function openEditDepositModal(id, amount, payment_method, transaction_id, notes, status) {
        // Find the deposit in the table to get all fields
        const depositsData = <%- JSON.stringify(deposits || []) %>;
        //console.log("openEditDepositModal depositsData", depositsData);
        const deposit = depositsData.find(function(d) { 
            return parseInt(d.id, 10) === parseInt(id, 10); 
        });
        //console.log("openEditDepositModal deposit", deposit);
        
        // If deposit doesn't have a setting_id, fetch the latest Recurring Deposit setting
        if(!deposit.setting_id){
            // Get the user ID from the URL or a hidden field
            const userId = '<%= member.id %>';
            
            // Fetch the latest active setting for this user
            fetch('/members/cd-settings?user_id=' + userId)
                .then(function(response) { return response.json(); })
                .then(function(data) {
                    if (data.success && data.settings && data.settings.length > 0) {
                        // Find active setting
                        const activeSetting = data.settings.find(function(setting) { 
                            return setting.is_active; 
                        });
                        
                        if (activeSetting) {
                            // Set the values from the active setting
                            document.getElementById('edit_per_day_rate').value = parseFloat(activeSetting.annual_rate/365).toFixed(2) || '';
                            document.getElementById('edit_required_amount').value = activeSetting.amount || '';
                            document.getElementById('edit_payment_interval').value = activeSetting.payment_interval || 'Monthly';
                            document.getElementById('edit_setting_id').value = activeSetting.id;
                        }
                    }
                })
                .catch(function(error) {
                    console.error('Error fetching CD settings:', error);
                });
        }
        
        if (deposit) {
            document.getElementById('edit_deposit_id').value = id;
            document.getElementById('edit_setting_id').value = deposit.setting_id;
            document.getElementById('edit_amount').value = amount;
            document.getElementById('edit_per_day_rate').value = deposit.per_day_rate || '';
            document.getElementById('edit_required_amount').value = deposit.required_amount || '';
            document.getElementById('edit_payment_interval').value = deposit.payment_interval || 'Monthly';
            document.getElementById('edit_payment_method').value = payment_method;
            document.getElementById('edit_transaction_id').value = transaction_id;
            document.getElementById('edit_penalty_amount').value = deposit.penality_amount || '0.00';
            document.getElementById('edit_penalty_paid_amount').value = deposit.penality_paid_amount || '0.00';
            document.getElementById('edit_comments').value = notes;
            document.getElementById('edit_status').value = status;
            
            const modal = new bootstrap.Modal(document.getElementById('editDepositModal'));
            modal.show();
        } else {
            alert('Deposit details not found.');
        }
    }
    
    // Edit Deposit Form Submission
    function submitEditDepositForm() {
        const form = document.getElementById('editDepositForm');
        
        // Add custom validation for required fields
        const amountValue = document.getElementById('edit_amount').value;
        const paymentMethodValue = document.getElementById('edit_payment_method').value;
        const statusValue = document.getElementById('edit_status').value;
        
        // Check required fields manually
        if (!amountValue || !paymentMethodValue || !statusValue) {
            alert('Please fill in all required fields: Paid Amount, Payment Method, and Status');
            return;
        }
        
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        const depositId = document.getElementById('edit_deposit_id').value;
        const per_day_rate = document.getElementById('edit_per_day_rate').value;
        const required_amount = document.getElementById('edit_required_amount').value;
        const payment_interval = document.getElementById('edit_payment_interval').value;
        const transaction_id = document.getElementById('edit_transaction_id').value || '';
        const penality_amount = document.getElementById('edit_penalty_amount').value || '0';
        const penality_paid_amount = document.getElementById('edit_penalty_paid_amount').value || '0';
        const comments = document.getElementById('edit_comments').value || '';
        
        // Get setting_id if available
        const settingIdField = document.getElementById('edit_setting_id');
        const setting_id = settingIdField ? settingIdField.value : null;
        
        // Show loading state on the update button
        const updateButton = document.querySelector('#editDepositModal .modal-footer .btn-primary');
        const originalText = updateButton.textContent;
        updateButton.textContent = 'Updating...';
        updateButton.disabled = true;
        
        fetch(`/members/recurring-deposit/${depositId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                amount: amountValue,
                per_day_rate,
                required_amount,
                payment_interval,
                payment_method: paymentMethodValue,
                transaction_id,
                penality_amount,
                penality_paid_amount,
                comments,
                status: statusValue,
                setting_id: setting_id
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Close modal and reload page
                const modal = bootstrap.Modal.getInstance(document.getElementById('editDepositModal'));
                modal.hide();
                
                // Show success message
                alert('Deposit updated successfully!');
                
                // Reload page to show updated deposit
                window.location.reload();
            } else {
                alert('Error: ' + data.message);
                
                // Reset button state
                updateButton.textContent = originalText;
                updateButton.disabled = false;
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while updating the deposit.');
            
            // Reset button state
            updateButton.textContent = originalText;
            updateButton.disabled = false;
        });
    }
    
    // View Deposit Details
    function viewDepositDetails(depositId) {
        // Find the deposit in the table
        const depositsData = <%- JSON.stringify(deposits || []) %>;
        const deposit = depositsData.find(function(d) { 
            return parseInt(d.id, 10) === parseInt(depositId, 10); 
        });
        
        if (deposit) {
            // Per Day Rate and Required Amount
            document.getElementById('view_per_day_rate').textContent = deposit.per_day_rate ? deposit.per_day_rate + '%' : 'N/A';
            document.getElementById('view_required_amount').textContent = '₹ ' + parseFloat(deposit.required_amount).toFixed(2);
            
            // Payment Interval and Paid Amount
            document.getElementById('view_payment_interval').textContent = deposit.payment_interval || 'N/A';
            document.getElementById('view_amount').textContent = '₹ ' + parseFloat(deposit.amount).toFixed(2);
            
            // Payment Method and Transaction ID
            document.getElementById('view_payment_method').textContent = deposit.payment_method || 'N/A';
            document.getElementById('view_transaction_id').textContent = deposit.transaction_id || 'N/A';
            
            // Penalty Amount and Penalty Paid Amount
            document.getElementById('view_penalty_amount').textContent = '₹ ' + parseFloat(deposit.penality_amount || 0).toFixed(2);
            document.getElementById('view_penalty_paid_amount').textContent = '₹ ' + parseFloat(deposit.penality_paid_amount || 0).toFixed(2);
            
            // Total Days and Total Interest
            const depositDate = new Date(deposit.deposit_date);
            const currentDate = new Date();
            const diffTime = Math.abs(currentDate - depositDate);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            document.getElementById('view_total_days').textContent = diffDays + ' days';
            document.getElementById('view_interest_amount').textContent = '₹ ' + parseFloat(deposit.interest_amount || 0).toFixed(2);
            
            // Interest Added status
            const interestAdded = deposit.interest_added === 1 || deposit.interest_added === true;
            document.getElementById('view_interest_added').textContent = interestAdded ? 'Yes' : 'No';
            
            // Total Amount
            document.getElementById('view_total_amount').textContent = '₹ ' + parseFloat(deposit.total_amount || 0).toFixed(2);
            
            // Notes
            document.getElementById('view_notes').textContent = deposit.comments || 'N/A';
            
            // Date
            document.getElementById('view_date').textContent = new Date(deposit.deposit_date).toLocaleDateString();
            
            // Status
            const statusBadge = document.getElementById('view_status_badge');
            statusBadge.textContent = deposit.status;
            statusBadge.className = 'status-badge status-' + deposit.status.toLowerCase();
            
            const modal = new bootstrap.Modal(document.getElementById('viewDepositModal'));
            modal.show();
        } else {
            alert('Deposit details not found.');
        }
    }
    
    // RD Settings Functions
    
    // Load RD Settings when modal is opened
    document.getElementById('rdSettingsModal').addEventListener('show.bs.modal', function () {
        loadRDSettings();
    });
    
    // Load RD Settings from the server
    function loadRDSettings() {
        const userId = document.getElementById('rd_user_id').value;
        fetch('/members/rd-settings?user_id=' + userId)
            .then(function(response) { return response.json(); })
            .then(function(data) {
                if (data.success) {
                    displayRDSettings(data.settings);
                } else {
                    console.error('Error loading RD settings:', data.message);
                    alert('Error loading RD settings: ' + data.message);
                }
            })
            .catch(function(error) {
                console.error('Error:', error);
                alert('An error occurred while loading RD settings.');
            });
    }
    
    // Display RD Settings in the table
    function displayRDSettings(settings) {
        const tableBody = document.getElementById('rdSettingsTableBody');
        tableBody.innerHTML = '';
        
        // Check if there's an active setting to determine if we should show the Add button
        const hasActiveSetting = settings && settings.some(function(setting) { return setting.is_active; });
        hasActiveRDSettings = hasActiveSetting; // Update global variable
        
        // If we have active settings now, enable all actions
        if (hasActiveSetting) {
            enableAllActions();
        } else {
            disableAllActions();
        }
        
        const addButton = document.querySelector('#rdSettingsModal .modal-footer .btn-primary');
        
        if (hasActiveSetting) {
            // If there's an active setting, disable the Add button
            addButton.textContent = 'Save Settings';
            addButton.disabled = true;
            addButton.title = 'Deactivate the current active setting before adding a new one';
            
            // Add a message at the top of the table
            // const messageDiv = document.createElement('div');
            // messageDiv.className = 'alert alert-info mb-3';
            // messageDiv.textContent = 'Only one active RD Setting is allowed. Deactivate the current setting to add a new one.';
            // document.getElementById('rdSettingsList').prepend(messageDiv);
        } else {
            // If there's no active setting, enable the Add button
            addButton.textContent = 'Save Settings';
            addButton.disabled = false;
            addButton.title = '';
            
            // Remove any existing message
            const existingMessage = document.getElementById('rdSettingsList').querySelector('.alert');
            if (existingMessage) {
                existingMessage.remove();
            }
        }
        
        if (settings && settings.length > 0) {
            settings.forEach(function(setting) {
                const row = document.createElement('tr');
                
                row.innerHTML = 
                    '<td>' + parseFloat(setting.annual_rate).toFixed(2) + '%</td>' +
                    '<td>' + setting.payment_interval + '</td>' +
                    '<td>₹ ' + setting.amount + '</td>' +
                    '<td>₹ ' + setting.penality_rate + '</td>' +
                    '<td>' + setting.duration/12 + ' ' + (setting.duration == 1 ? 'Year' : 'Years') + '</td>' +
                    '<td><span class="status-badge ' + (setting.is_active ? 'status-approved' : 'status-rejected') + '">' +
                    (setting.is_active ? 'Active' : 'Inactive') + '</span></td>' +
                    '<td><div class="button-group">' +
                    '<button class="btn btn-sm btn-warning" onclick="editRDSetting(' + setting.id + ', ' + setting.annual_rate + ', \'' + setting.payment_interval + '\', ' + setting.amount + ', ' + setting.duration + ', ' + (setting.is_active ? 'true' : 'false') + ')">' +
                    '<i class="bx bx-edit"></i></button>' +
                    '<button class="btn btn-sm btn-' + (setting.is_active ? 'danger' : 'success') + '" onclick="toggleRDSettingStatus(' + setting.id + ', ' + (!setting.is_active ? 'true' : 'false') + ')">' +
                    '<i class="bx bx-' + (setting.is_active ? 'power-off' : 'check') + '"></i></button>' +
                    '</div></td>';
                
                tableBody.appendChild(row);
            });
        } else {
            const row = document.createElement('tr');
            row.innerHTML = '<td colspan="5" class="text-center">No RD settings found</td>';
            tableBody.appendChild(row);
        }
    }
    
    // Submit RD Settings Form
    function submitRDSettingsForm() {
        const form = document.getElementById('rdSettingsForm');
        
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        // Set a flag to indicate we're submitting RD settings
        
        const user_id = document.getElementById('rd_user_id').value;
        const annual_rate = document.getElementById('annual_rate').value;
        const payment_interval = document.getElementById('payment_interval').value;
        const amount = document.getElementById('rd_amount').value;
        const duration = document.getElementById('duration').value;
        const penality_rate = document.getElementById('penality_rate').value;
        
        // Show loading state
        const saveButton = document.querySelector('#rdSettingsModal .modal-footer .btn-primary');
        const originalText = saveButton.textContent;
        saveButton.textContent = 'Saving...';
        saveButton.disabled = true;
        
        fetch('/members/rd-settings', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: user_id,
                annual_rate: annual_rate,
                payment_interval: payment_interval,
                amount: amount,
                duration: duration,
                penality_rate: penality_rate
            })
        })
        .then(function(response) { return response.json(); })
        .then(function(data) {
            if (data.success) {
                // Reset form
                form.reset();
                
                // Show success message
                alert('RD Setting added successfully!');
                
                // Reload settings
                loadRDSettings();
            } else {
                // Show error message
                alert('Error1: ' + data.message);
                
                // Reset button state
                saveButton.textContent = originalText;
                saveButton.disabled = false;
            }
        })
        .catch(function(error) {
            console.error('Error2:', error);
            alert('An error occurred while adding the RD setting.');
            
            // Reset button state
            saveButton.textContent = originalText;
            saveButton.disabled = false;
        });
    }
    
    // Edit RD Setting
    function editRDSetting(id, annual_rate, payment_interval, amount, duration, is_active) {
        // Set form values
        document.getElementById('annual_rate').value = annual_rate;
        document.getElementById('payment_interval').value = payment_interval;
        document.getElementById('rd_amount').value = amount;
        document.getElementById('duration').value = duration;
        
        // Change button to update
        const saveButton = document.querySelector('#rdSettingsModal .modal-footer .btn-primary');
        saveButton.textContent = 'Update Setting';
        saveButton.disabled = false; // Always enable the button for editing
        
        // Store the original onclick function
        const originalOnClick = saveButton.onclick;
        
        // Set new onclick function
        saveButton.onclick = function() {
            updateRDSetting(id);
            
            // After updating, restore the original onclick function
            setTimeout(function() {
                saveButton.onclick = originalOnClick;
            }, 100);
        };
    }
    
    // Update RD Setting
    function updateRDSetting(id) {
        const form = document.getElementById('rdSettingsForm');
        
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        const user_id = document.getElementById('rd_user_id').value;
        const annual_rate = document.getElementById('annual_rate').value;
        const payment_interval = document.getElementById('payment_interval').value;
        const amount = document.getElementById('rd_amount').value;
        const duration = document.getElementById('duration').value;
        
        fetch('/members/rd-settings/' + id, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: user_id,
                annual_rate: annual_rate,
                payment_interval: payment_interval,
                amount: amount,
                duration: duration
            })
        })
        .then(function(response) { return response.json(); })
        .then(function(data) {
            if (data.success) {
                // Reset form
                form.reset();
                
                // Reset button
                const saveButton = document.querySelector('#rdSettingsModal .modal-footer .btn-primary');
                saveButton.textContent = 'Save Settings';
                saveButton.onclick = submitRDSettingsForm;
                
                // Show success message
                alert('RD Setting updated successfully!');
                
                // Reload settings
                loadRDSettings();
            } else {
                alert('Error: ' + data.message);
            }
        })
        .catch(function(error) {
            console.error('Error:', error);
            alert('An error occurred while updating the RD setting.');
        });
    }
    
    // Toggle RD Setting Status (Active/Inactive)
    function toggleRDSettingStatus(id, makeActive) {
        if (!confirm('Are you sure you want to ' + (makeActive ? 'activate' : 'deactivate') + ' this RD setting?')) {
            return;
        }
        
        // If we're deactivating the only active setting, warn the user
        if (!makeActive && hasActiveRDSettings) {
            if (!confirm('Warning: Deactivating this setting will prevent any deposit actions until a new setting is activated. Continue?')) {
                return;
            }
        }
        
        // Show loading state on the button
        const button = event.target.closest('button');
        const originalHTML = button.innerHTML;
        button.innerHTML = '<i class="bx bx-loader bx-spin"></i>';
        button.disabled = true;
        
        fetch('/members/rd-settings/' + id, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                is_active: makeActive
            })
        })
        .then(function(response) { return response.json(); })
        .then(function(data) {
            if (data.success) {
                // Show success message
                alert('RD Setting ' + (makeActive ? 'activated' : 'deactivated') + ' successfully!');
                
                // Reload settings
                loadRDSettings();
            } else {
                // Show error message
                alert('Error: ' + data.message);
                
                // Reset button state
                button.innerHTML = originalHTML;
                button.disabled = false;
            }
        })
        .catch(function(error) {
            console.error('Error:', error);
            alert('An error occurred while updating the RD setting status.');
            
            // Reset button state
            button.innerHTML = originalHTML;
            button.disabled = false;
        });
    }
</script>
